[
  {
    "title": "Linux 系统监控利器 ctop 命令详解",
    "author": "杜老师说",
    "date": "2025-07-11T16:00:00.000Z",
    "link": "https://dusays.com/816/",
    "content": "<blockquote><p>在 Linux 系统，尤其是当我们在管理多个容器时，了解系统和容器的资源使用情况至关重要。今天，就给大家介绍一款强大的监控工具 ctop，本文详细介绍 ctop 的安装、使用、命令选项。</p></blockquote><span id=\"more\"></span><h2 id=\"ctop-命令的简介\"><a href=\"#ctop-命令的简介\" class=\"headerlink\" title=\"ctop 命令的简介\"></a>ctop 命令的简介</h2><p>ctop 是一个类似 top 命令的界面工具，它专注于容器环境，能够实时监控 Docker&#x2F;Podman 等容器运行时的性能指标，如 CPU、内存、网络、磁盘 I&#x2F;O 等使用情况。</p><p>它以一种直观的方式展示各个容器的详细信息，让管理员可以迅速掌握系统整体健康状况，并且快速定位到可能存在性能瓶颈的容器。</p><p>与传统 top 命令相比，ctop 提供更丰富的容器相关数据和更便捷的交互方式。</p><p>它不仅能展示容器的基本资源使用率，还能深入到每个容器的进程级别，查看内部运行具体进程，这对于深入分析容器性能表现非常有帮助。</p><h2 id=\"ctop-命令的安装\"><a href=\"#ctop-命令的安装\" class=\"headerlink\" title=\"ctop 命令的安装\"></a>ctop 命令的安装</h2><ol><li>Linux 系统的安装方法「以 Ubuntu 为例」</li></ol><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget https://github.com/bcicen/ctop/releases/download/v0.7.7/ctop-0.7.7-linux-amd64 -O /usr/local/bin/ctop</span><br><span class=\"line\">sudo chmod +x /usr/local/bin/ctop</span><br></pre></td></tr></table></figure><p>注意：可以直接从 Github 下载最新版本的二进制文件进行安装，以上是具体的步骤「这里以 <code>v0.7.7</code> 版本为例」最后，用命令 <code>ctop -v</code> 验证是否安装成功，若可以正确显示版本号，说明安装成功。</p><ol start=\"2\"><li>通过 Docker 的方法安装</li></ol><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm -it --name=ctop -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop:latest</span><br></pre></td></tr></table></figure><p>注意：也可以使用 Docker 快速启动 ctop 容器来进行监控。</p><h2 id=\"ctop-命令的使用\"><a href=\"#ctop-命令的使用\" class=\"headerlink\" title=\"ctop 命令的使用\"></a>ctop 命令的使用</h2><ol><li>基本使用</li></ol><p>在终端中输入 ctop 命令后回车，即可启动 ctop 程序进入主界面。在界面中，会显示出所有正在运行的容器及其资源使用情况的概览，包括容器名称、CPU 使用率、内存使用量及限制、网络收发速率、磁盘读写速率、进程数等信息。</p><p>可以通过方向键上下移动光标来选择不同容器，然后按下回车键可以查看到所选容器详细信息，如容器的创建时间、各资源的详细使用数据以及内部运行的进程列表等。</p><ol start=\"2\"><li>命令选项</li></ol><p>命令选项列表如下：</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>ctop -a</td><td>只查看正在运行中容器，方便专注那些实际处于活动状态、可能对系统资源产生影响的容器。</td></tr><tr><td>ctop -f string</td><td>查看包含指定字符串的容器，当系统中有大量容器时，利用此选项可快速过滤出我们关心的特定容器进行监控。</td></tr><tr><td>ctop -i</td><td>反转默认颜色，如默认的颜色显示效果不佳，或需要与其它界面风格保持一致，可使用该选项来改变界面的颜色显示。</td></tr><tr><td>ctop -r</td><td>反向容器排列顺序，默认情况下存活的容器在前，使用此选项可将其顺序反转，以便按照不同顺序查看容器。</td></tr><tr><td>ctop -s string</td><td>按照指定字段排序，如执行 <code>ctop -s net</code> 可以按照网络使用率对容器进行排序，从而快速找到网络流量较高容器。</td></tr></tbody></table><h2 id=\"交互操作\"><a href=\"#交互操作\" class=\"headerlink\" title=\"交互操作\"></a>交互操作</h2><p>交互操作列表如下：</p><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>h</td><td>打开帮助，在使用过程中如果忘记了某些快捷键的功能或者想了解更多操作方法，可以随时按下 <code>h</code> 键查看帮助信息。</td></tr><tr><td>s</td><td>打开排序，通过此快捷键可以方便地切换不同的排序字段，无需重新输入命令选项。</td></tr><tr><td>q</td><td>退出打开的对话框，当查看完帮助信息或排序设置后，按下 <code>q</code> 键可以退出相应的对话框，返回到主界面。</td></tr><tr><td>a</td><td>只显示正在运行的容器，与 <code>ctop -a</code> 命令效果一致，但在已经启动了 ctop 程序的情况下，使用快捷键可更快速地切换显示模式。</td></tr><tr><td>r</td><td>反转排序，正在运行容器放在末尾，方便在不同的排序需求之间快速切换。</td></tr><tr><td>f</td><td>输入指定字符串过滤出想要查看容器，与 <code>ctop -f string</code> 命令类似，无需重新输入命令，直接在当前界面中进行过滤操作。</td></tr><tr><td>j</td><td>用于向下移动光标，方便在容器列表中快速定位到不同的容器。</td></tr><tr><td>k</td><td>用于向上移动光标，方便在容器列表中快速定位到不同的容器。</td></tr><tr><td>Enter</td><td>查看指定容器详细指标，当光标定位到某个容器，按下回车键即可进入该容器详细信息界面，查看更全面的资源使用以及进程信息。</td></tr></tbody></table>"
  },
  {
    "title": "企业微信实用操作指南",
    "author": "LiuShen's Blog",
    "date": "2025-07-10T17:09:00.000Z",
    "link": "https://blog.liushen.fun/posts/c00eee1d/",
    "content": "刚开始用企业微信时，总觉得它是多余的累赘，占空间又麻烦。但用了一段时间后，意外发现它其实很好用，甚至在某些方面比普通微信更强。这篇文章就简单聊聊，正确开启企业微信的方式吧！"
  },
  {
    "title": "Linux 下的高效压缩工具 Zstandard",
    "author": "杜老师说",
    "date": "2025-07-05T16:00:00.000Z",
    "link": "https://dusays.com/815/",
    "content": "<blockquote><p>Zstandard 以其卓越的性能和丰富的功能，成为了 Linux 下一款不可或缺的压缩工具。无论是对单个文件还是整个目录的压缩和解压，它都可以轻松应对，且在处理速度和压缩效果上都有着出色的表现。</p></blockquote><span id=\"more\"></span><h2 id=\"Zstandard-的简介\"><a href=\"#Zstandard-的简介\" class=\"headerlink\" title=\"Zstandard 的简介\"></a>Zstandard 的简介</h2><p>Zstandard 是由 Facebook 开发并开源的一种快速无损压缩算法，2015 年首次发布以来，凭借其高压缩比和快速的解压缩速度，逐渐受到了开发者青睐。</p><p>它不仅在压缩效率上超越传统的 gzip 等工具，还能在保持高压缩率的同时，实现极快解压速度，特别适合对数据处理效率要求较高的场景，如大数据处理、日志压缩、网络数据传输等等。</p><h2 id=\"Zstandard-的特点\"><a href=\"#Zstandard-的特点\" class=\"headerlink\" title=\"Zstandard 的特点\"></a>Zstandard 的特点</h2><p>高压缩比：通常情况下 Zstandard 能够获得比 gzip 更好压缩效果，有效减少数据存储空间。</p><p>快速解压：其解压缩速度极快，即使是低压缩等级，解压速度也能远超一些 SSD 的读取速度，大大提高了数据的读取效率。</p><p>多线程的支持：Zstandard 自带多线程压缩功能，可以充分利用多核 CPU 的性能，大幅提升压缩速度。例如，在处理大量数据时，多线程压缩能够显著的缩短压缩时间，提高工作效率。</p><p>丰富压缩级别选择：提供了从 1 到 22 的压缩级别选择，用户可根据实际需求在压缩速度和压缩率之间进行灵活权衡。压缩级别越高，压缩比率越大，但压缩速度会相应减慢；反之，压缩级别越低，压缩速度越快，但压缩比率会有所降低。</p><p>字典压缩模式：Zstandard 为小数据提供一种特殊的字典压缩模式。用户可通过提供一些样本数据来训练生成字典，然后在压缩和解压时加载该字典，从而在小数据上实现更高压缩率，这对于处理大量小文件场景非常有用。</p><p>使用模式：Zstandard 提供了多种命令模式，包括压缩、解压、查看压缩信息、测试压缩文件等等。</p><h2 id=\"Zstandard-的安装\"><a href=\"#Zstandard-的安装\" class=\"headerlink\" title=\"Zstandard 的安装\"></a>Zstandard 的安装</h2><p>Debian&#x2F;Ubuntu 系统的安装命令如下：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install zstd</span><br></pre></td></tr></table></figure><p>Fedora&#x2F;Red Hat&#x2F;CentOS&#x2F;AlmaLinux 系统的安装命令如下：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dnf install zstd</span><br></pre></td></tr></table></figure><p>Arch Linux&#x2F;Manjaro 系统的安装命令如下：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S zstd</span><br></pre></td></tr></table></figure><p>也可以从源码编译安装「这里以 <code>1.5.7</code> 版本为例」命令如下：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/facebook/zstd/releases/download/v1.5.7/zstd-1.5.7.tar.gz</span><br><span class=\"line\">tar -zxvf zstd-1.5.7.tar.gz</span><br><span class=\"line\">cd zstd-1.5.7/</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure><h2 id=\"Zstandard-的使用\"><a href=\"#Zstandard-的使用\" class=\"headerlink\" title=\"Zstandard 的使用\"></a>Zstandard 的使用</h2><ol><li>压缩文件</li></ol><p>基础压缩：使用命令 <code>zstd file_name</code> 即可对文件进行压缩，压缩后会生成一个扩展名为<code>.zst</code> 的文件，如 <code>zstd doc.txt</code>，会生成 <code>doc.txt.zst</code> 文件。</p><p>指定压缩级别：可通过选项来指定压缩级别，例如 <code>zstd -3 file_name</code> 表示使用压缩级别<code>-3</code> 进行压缩。</p><ol start=\"2\"><li>解压文件</li></ol><p>基础解压：使用 <code>zstd -d archive_name.zst</code> 即可对文件进行解压，解压后的文件会自动去除<code>.zst</code> 后缀。</p><p>指定解压后文件名：同样可使用<code>-o</code> 选项来指定解压后的文件名，如 <code>zstd -d archive_name.zst -o new_file_name</code>。</p><ol start=\"3\"><li>压缩目录</li></ol><p>压缩整个目录：可以使用 <code>zstd -rz directory_name</code> 来压缩整个目录，其中<code>-r</code> 表示递归压缩目录中所有文件和子目录，<code>-z</code> 表示压缩的操作。</p><p>解压目录：对于压缩后的目录文件，使用 <code>zstd -dr archive_name.zst</code> 进行解压缩，<code>-d</code> 表示解压缩操作，<code>-r</code> 表示递归解压缩。</p><ol start=\"4\"><li>查看压缩文件内容</li></ol><p>使用 <code>zstd -l archive_name.zst</code> 可以查看压缩文件的相关信息，如压缩比、压缩级别、文件大小等等。</p><p>而 <code>zstd -t archive_name.zst</code> 则可用于测试压缩文件的完整性，确保文件在压缩和传输过程中未损坏。</p>"
  },
  {
    "title": "浅谈AIGC论文检测",
    "author": "LiuShen's Blog",
    "date": "2025-07-01T11:32:00.000Z",
    "link": "https://blog.liushen.fun/posts/58e1bd57/",
    "content": "六月初的我刚提交论文，如今六月将尽，才有心情回顾那段被AIGC检测折磨的经历。当前主流的AIGC检测工具普遍存在逻辑简单、误判率高的问题，只要语句稍显严谨、条理清晰，便容易被认定为AI生成。本文将就此简单谈谈个人感受与看法。"
  },
  {
    "title": "使用 Python 脚本下载指定网页的图片文件",
    "author": "杜老师说",
    "date": "2025-06-29T16:00:00.000Z",
    "link": "https://dusays.com/814/",
    "content": "<blockquote><p>有小伙伴反馈说侧边栏随机图出现了重复，有些审美疲劳，要求杜老师再更新一些图片，正好聊天广场有小伙伴分享了一个美图的网址。本文分享如何使用 Python 脚本下载指定网页的图片文件，需要的小伙伴可以参考文中代码。</p></blockquote><span id=\"more\"></span><h2 id=\"代码需求\"><a href=\"#代码需求\" class=\"headerlink\" title=\"代码需求\"></a>代码需求</h2><p>使用 Python 的语言编写一个脚本，下载指定网址中包含的多种格式图片文件，如 JPG 和 PNG 格式图片。</p><p>将图片保存至指定的目录中，可以指定绝对路径，或者相对路径。</p><p>并用随机数重命名，防止同名图片触发覆盖事件。</p><p>尽可能使用 Python 的标准库，尽量避免使用第三方库。</p><h2 id=\"变更解释\"><a href=\"#变更解释\" class=\"headerlink\" title=\"变更解释\"></a>变更解释</h2><ol><li><p>导入必要的库：包括 <code>os</code>&#x2F;<code>requests</code>&#x2F;<code>re</code> 以及 <code>random</code>；</p></li><li><p>定义函数：<code>download_images</code> 函数可用于下载图片；</p></li><li><p>获取图片链接：使用正则表达式从网页内容中提取图片 URL；</p></li><li><p>下载保存图片：使用 <code>requests</code> 库下载图片，并且使用 <code>random</code> 库生成随机数作为文件名；</p></li><li><p>指定目录：确保保存目录存在，如果不存在则创建；</p></li><li><p>获取内容：使用 <code>requests</code> 库获取网页内容。</p></li></ol><h2 id=\"功能代码\"><a href=\"#功能代码\" class=\"headerlink\" title=\"功能代码\"></a>功能代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">def download_images(url, save_folder):</span><br><span class=\"line\">    # 确保保存目录存在</span><br><span class=\"line\">    if not os.path.exists(save_folder):</span><br><span class=\"line\">        os.makedirs(save_folder)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 发送HTTP请求获取网页内容</span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    if response.status_code != 200:</span><br><span class=\"line\">        print(f&quot;Failed to retrieve the webpage. Status code: &#123;response.status_code&#125;&quot;)</span><br><span class=\"line\">        return</span><br><span class=\"line\"></span><br><span class=\"line\">    # 使用正则表达式查找所有的图片URL</span><br><span class=\"line\">    image_urls = re.findall(r&#x27;&lt;img[^&gt;]+src=[&quot;\\&#x27;](.*?)[&quot;\\&#x27;]&#x27;, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    for img_url in image_urls:</span><br><span class=\"line\">        # 处理相对路径的URL</span><br><span class=\"line\">        if not img_url.startswith((&#x27;http://&#x27;, &#x27;https://&#x27;)):</span><br><span class=\"line\">            img_url = os.path.join(url, img_url)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 下载图片</span><br><span class=\"line\">        img_response = requests.get(img_url)</span><br><span class=\"line\">        if img_response.status_code == 200:</span><br><span class=\"line\">            # 生成随机文件名</span><br><span class=\"line\">            random_filename = f&quot;&#123;random.randint(10000, 99999)&#125;.jpg&quot;</span><br><span class=\"line\">            save_path = os.path.join(save_folder, random_filename)</span><br><span class=\"line\"></span><br><span class=\"line\">            # 保存图片</span><br><span class=\"line\">            with open(save_path, &#x27;wb&#x27;) as f:</span><br><span class=\"line\">                f.write(img_response.content)</span><br><span class=\"line\">            print(f&quot;Downloaded and saved &#123;img_url&#125; as &#123;save_path&#125;&quot;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(f&quot;Failed to download &#123;img_url&#125;. Status code: &#123;img_response.status_code&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 读取网址列表文件</span><br><span class=\"line\">def read_urls_from_file(file_path):</span><br><span class=\"line\">    with open(file_path, &#x27;r&#x27;) as file:</span><br><span class=\"line\">        urls = file.readlines()</span><br><span class=\"line\">    return [url.strip() for url in urls]</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例调用</span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    urls_file = &#x27;f:\\\\代码\\\\urls.txt&#x27;  # 包含网址的文件路径</span><br><span class=\"line\">    save_folder = &#x27;f:\\\\代码\\\\images&#x27;  # 保存图片的目录路径</span><br><span class=\"line\"></span><br><span class=\"line\">    urls = read_urls_from_file(urls_file)</span><br><span class=\"line\">    for url in urls:</span><br><span class=\"line\">        download_images(url, save_folder)</span><br></pre></td></tr></table></figure><p>注意：本示例代码仅适用于 Python 3.x 版本，运行于 Windows 系统。如使用 Linux 系统，可能需要进行相应修改。</p><h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>将上述的代码保存为 <code>download_images.py</code> 文件。</p><p>在运行脚本时，传入目标网页的 URL 和保存图片的目录路径。</p><p>脚本会自动下载网页中所有图片，并且以随机数命名保存到指定目录中。</p><p>打开的网址保存在一个文件，每行一个网址。</p>"
  },
  {
    "title": "X Window 与 Wayland 的深度对比",
    "author": "杜老师说",
    "date": "2025-06-23T16:00:00.000Z",
    "link": "https://dusays.com/813/",
    "content": "<blockquote><p>X Window 与 Wayland 不仅代表了图形界面技术不同发展阶段，更体现了设计理念、架构模式及应用场景的显著差异。本文将从历史背景、技术特点、应用场景及未来展望等多个维度，对 X Window 和 Wayland 进行深入剖析。</p></blockquote><span id=\"more\"></span><h2 id=\"历史背景演变\"><a href=\"#历史背景演变\" class=\"headerlink\" title=\"历史背景演变\"></a>历史背景演变</h2><p>X11 诞生于 1984 年，由麻省理工学院 MIT 开发，旨在满足分布式计算环境下图形界面需求。其设计哲学强调网络透明性，允许用户在远程服务器运行应用程序，并在本地终端显示结果，极大地拓展 GUI 的可用性和灵活性。随着时间推移，X11 凭借其广泛的硬件和软件支持，逐渐成为 Linux 桌面环境的标准图形界面后端。</p><p>随着计算需求增长，X11 的一些设计局限逐渐显现，例如架构复杂、性能瓶颈和安全性问题。2008 年，Kristian 提出 Wayland 项目，旨在创建一个更加现代、高效窗口系统。Wayland 的设计重点在于简化架构、提高性能和增强安全性，采用客户端 Compositor 通信模型，减少了中间层，提升了效率和响应速度。</p><h2 id=\"技术特点比较\"><a href=\"#技术特点比较\" class=\"headerlink\" title=\"技术特点比较\"></a>技术特点比较</h2><p>X11 采用 C&#x2F;S 模型，客户端通过 X 协议与服务器通信，而 X 服务器负责处理所有图形和输入事件。相比之下，Wayland 采用了客户端 Compositor 模型，客户端可直接与 Compositor 通信，Compositor 负责了窗口管理、合成、输出。Wayland 的架构更加贴合现代图形硬件特性，可以更高效地利用 GPU 和现代显示技术。</p><p>X11 在安全性方面存在了固有弱点，其复杂协议和广泛权限易被恶意利用。Wayland 通过限制客户端权限以及简化通信模型，显著提高了安全性。例如，Wayland 禁止了应用程序直接访问底层硬件，只允许了它们与 Compositor 通信，从而增强系统的安全性。</p><p>Wayland 的协议设计更加高效，减少了延迟和带宽消耗。在移动设备和资源受限的环境中，Wayland 的优势尤为明显。此外，Wayland 避免了不必要的复杂性和额外处理，使得其在性能上优于 X11。尤其是在窗口大小调整以及拖动等操作中，Wayland 显得更加的平滑流畅。</p><p>X11 拥有庞大的生态系统，支持大量的应用程序和工具，几乎所有 Linux 发行版默认都使用 X11。然而，Wayland 的生态系统正在快速发展，主要桌面环境如 GNOME 和 KDE 已全面支持 Wayland。尽管如此，一些特定应用程序和工具可能仍需要额外的兼容层或补丁才能在 Wayland 下运行。</p><h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>在桌面环境中，X11 凭借其广泛的兼容性和成熟度，仍然是许多用户的首选。但随着硬件技术的进步和用户对高性能图形渲染的需求增加，Wayland 正在逐渐成为主流的选择。</p><p>越来越多的 Linux 发行版开始默认支持 Wayland，例如 Fedora 和 Ubuntu 等。</p><p>在移动设备和嵌入式系统中，资源受限是一个普遍的问题。Wayland 的低功耗以及高性能特性使其成为这些场景下的理想选择。</p><p>例如，Android 系统中的 SurfaceFlinger 就是基于 Wayland 的原理设计，用于图形显示以及窗口管理。</p><p>在虚拟化和云计算的环境中，图形性能以及网络传输效率至关重要。</p><p>虽然 X11 的网络透明性在某些场景下仍有些优势，但 Wayland 通过优化的协议和架构，正在成为虚拟桌面基础设施 VDI 和云桌面解决方案的首选，特别在需要高性能图形渲染的场景中。</p><h2 id=\"未来展望\"><a href=\"#未来展望\" class=\"headerlink\" title=\"未来展望\"></a>未来展望</h2><p>随着 GPU 技术的成熟以及高性能计算需求的增长，图形界面的渲染以及交互将变得更加复杂和多样化。</p><p>X11 和 Wayland 都在积极的探索与 Direct Rendering Manager、Mesa 等图形驱动框架的更紧密集成，以实现更高效的图形渲染和硬件加速。</p><p>此外，Wayland 还在研究如何更好地支持多显示器配置、高分辨率显示、触控输入，以满足未来计算环境多样化需求。</p><p>最后说两句题外话，近一个月杜老师因为工作的原因，拖更了很多篇文章，感谢小伙伴们的关注和催更，近期会大批量发表一些技术文章，欢迎大家关注。</p>"
  },
  {
    "title": "腾讯EdgeOne免费国内CDN",
    "author": "LiuShen's Blog",
    "date": "2025-06-21T05:12:00.000Z",
    "link": "https://blog.liushen.fun/posts/68b52a49/",
    "content": "最近各类公益CDN层出不穷，个人站长迎来新机遇。阿里、腾讯相继推出免费CDN套餐，门槛低、易上手。机缘巧合我拿到腾讯海外站EdgeOne的免费套餐兑换码，立刻上手体，整体表现非常流畅，配置简单，速度也令人满意。这篇也将简要说明一下我的使用感受。"
  },
  {
    "title": "OpenResty 的性能优化配置建议",
    "author": "杜老师说",
    "date": "2025-06-17T16:00:00.000Z",
    "link": "https://dusays.com/812/",
    "content": "<blockquote><p>1Panel 的用户越来越多，内置 Web 服务 OpenResty 使用占比也在增加，但网上对其优化的教程很少。应关关童靴的需求，更新一篇有关 OpenResty 的一些优化建议。可优化设置项较少，需要的小伙伴可以根据实际需求变更配置。</p></blockquote><span id=\"more\"></span><h2 id=\"server-names-hash-bucket-size-参数项\"><a href=\"#server-names-hash-bucket-size-参数项\" class=\"headerlink\" title=\"server_names_hash_bucket_size 参数项\"></a>server_names_hash_bucket_size 参数项</h2><p>含义：该参数用于设置服务器名字 hash 表大小，若名字过长或服务较多，保持默认值可能使 hash 表空间不足，引发错误。</p><p>优化建议：一般为 <code>server_names_hash_max_size</code> 的 1&#x2F;2-1&#x2F;3 左右，如服务器配置较高，可直接设置 <code>256</code>。</p><h2 id=\"gzip-参数项\"><a href=\"#gzip-参数项\" class=\"headerlink\" title=\"gzip 参数项\"></a>gzip 参数项</h2><p><code>gzip_min_length</code> 参数项：对小文件压缩可能得不偿失，一般设置为 <code>1k</code> 或 <code>10k</code> 左右，小于该值的文件不压缩。</p><p><code>gzip_comp_level</code> 参数项：压缩级别，<code>1</code> 为最小最快，<code>9</code> 为最大最慢，通常建议设置为 <code>4-6</code>，以平衡压缩效果和 CPU 使用率。</p><h2 id=\"client-header-buffer-size-参数项\"><a href=\"#client-header-buffer-size-参数项\" class=\"headerlink\" title=\"client_header_buffer_size 参数项\"></a>client_header_buffer_size 参数项</h2><p>含义：用于设置读取客户端请求头的缓冲区大小，若请求头过大，可能超出默认值导致客户端报错。</p><p>优化建议：根据实际业务需求调整，如业务请求头通常较大，可设为 <code>32k</code> 左右，确保可以完整读取大部分请求头。</p><h2 id=\"client-max-body-size-参数项\"><a href=\"#client-max-body-size-参数项\" class=\"headerlink\" title=\"client_max_body_size 参数项\"></a>client_max_body_size 参数项</h2><p>含义：限制客户端请求主体的最大允许大小，超出该值请求将被拒绝。</p><p>优化建议：根据业务场景和服务器承受能力设置，如普通表单提交可设置为 <code>10m-20m</code> 左右，对于文件上传等大请求可以适当增大。</p><h2 id=\"keepalive-timeout-参数项\"><a href=\"#keepalive-timeout-参数项\" class=\"headerlink\" title=\"keepalive_timeout 参数项\"></a>keepalive_timeout 参数项</h2><p>含义：设置长连接的超时时间，即客户端与服务器间连接保持空闲的最大时间。</p><p>优化建议：一般设为 <code>60-90</code> 秒左右，时间过短会频繁断开连接且增加开销，过长则可能占用过多的资源。</p><h2 id=\"优化后的配置示例\"><a href=\"#优化后的配置示例\" class=\"headerlink\" title=\"优化后的配置示例\"></a>优化后的配置示例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    # gzip相关配置</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">    gzip_buffers 4 16k;</span><br><span class=\"line\">    gzip_http_version 1.1;</span><br><span class=\"line\">    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php application/json;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    gzip_proxied any;</span><br><span class=\"line\">    gzip_disable &quot;msie6&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 服务器名字hash表大小</span><br><span class=\"line\">    server_names_hash_bucket_size 128;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 客户端请求头缓冲区大小</span><br><span class=\"line\">    client_header_buffer_size 32k;</span><br><span class=\"line\">    large_client_header_buffers 4 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 客户端请求主体最大允许大小</span><br><span class=\"line\">    client_max_body_size 32m;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 长连接超时时间</span><br><span class=\"line\">    keepalive_timeout 60;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 其他配置...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意：以上配置仅供参考，具体优化需根据实际业务场景和硬件配置进行调优。</p>"
  },
  {
    "title": "Cloudflare/Vercel项目推荐(5)",
    "author": "LiuShen's Blog",
    "date": "2025-06-12T13:12:00.000Z",
    "link": "https://blog.liushen.fun/posts/5aebde52/",
    "content": "项目荒啦！终于凑够了一批项目，前面四期深受大家喜爱，获得了不少评论和浏览量，那就更新一篇文章吧！本次更新主要围绕着cloudflare和Vercel展开，基本上都可以零成本部署，欢迎尝试部署！当然我也会提供预览地址，如果用处较大会一直维护，欢迎访问呀！"
  },
  {
    "title": "Nginx 从配置到缓存的性能优化",
    "author": "杜老师说",
    "date": "2025-06-11T16:00:00.000Z",
    "link": "https://dusays.com/811/",
    "content": "<blockquote><p>Nginx 是一个高性能的 HTTP 服务器和反向代理服务器，广泛应用于处理高并发请求。然而，默认配置并不一定适合所有场景，尤其是在高流量或复杂业务逻辑的情况下。本文将介绍一些 Nginx 的基础配置优化和缓存的使用方法以提升 Nginx 的性能。</p></blockquote><span id=\"more\"></span><h2 id=\"基础配置优化\"><a href=\"#基础配置优化\" class=\"headerlink\" title=\"基础配置优化\"></a>基础配置优化</h2><ol><li>调整 <code>worker_processes</code> 以及 <code>worker_connections</code></li></ol><p>Nginx 使用多进程模型处理请求。<code>worker_processes</code> 定义 Nginx 使用的工作进程数，而 <code>worker_connections</code> 定义每个工作进程可以处理的最大连接数：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>参数作用如下：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>worker_processes</td><td>设置为 <code>auto</code> 可以让 Nginx 自动根据 CPU 核心数来分配工作进程数。如服务器有 4 个 CPU 核心，Nginx 会启动 4 个工作进程。</td></tr><tr><td>worker_connections</td><td>这个值决定了每个工作进程可以处理的最大连接数。通常，可根据服务器的内存和网络带宽来调整这个值。<code>1024</code> 是一个常见起点，可以调整到 2048。</td></tr></tbody></table><ol start=\"2\"><li>启用 <code>keepalive</code> 长连接</li></ol><p>HTTP 协议中的 <code>keepalive</code> 机制允许客户端和服务器在同一个连接上发送多个请求，减少了 TCP 连接的建立和关闭开销：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    keepalive_timeout 65;</span><br><span class=\"line\">    keepalive_requests 100;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>参数作用如下：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>keepalive_timeout</td><td>定义客户端与服务器保持连接的时间。设置为 <code>65</code> 秒意味着如果客户端在 <code>65</code> 秒内没有发送新请求，连接将被关闭。</td></tr><tr><td>keepalive_requests</td><td>定义了单个连接上允许的最大请求数。设置为 <code>100</code> 意味着一个连接可以处理 <code>100</code> 个请求后关闭。</td></tr></tbody></table><ol start=\"3\"><li>调整 <code>buffer</code> 的大小</li></ol><p>Nginx 使用缓冲区来存储请求和响应数据。如缓冲区设置过小，Nginx 可能会频繁地进行磁盘 I&#x2F;O 操作，影响性能：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    client_body_buffer_size 10K;</span><br><span class=\"line\">    client_header_buffer_size 1k;</span><br><span class=\"line\">    large_client_header_buffers 48k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>参数作用如下：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>client_body_buffer_size</td><td>定义用于存储客户端请求体的缓冲区大小。如请求体超过这个大小，会将数据写入磁盘。</td></tr><tr><td>client_header_buffer_size</td><td>定义用于存储客户端请求头的缓冲区大小。</td></tr><tr><td>large_client_header_buffers</td><td>定义用于存储大型请求头的缓冲区数量和大小。</td></tr></tbody></table><h2 id=\"缓存提升性能\"><a href=\"#缓存提升性能\" class=\"headerlink\" title=\"缓存提升性能\"></a>缓存提升性能</h2><ol><li>启动静态资源缓存</li></ol><p>对于静态资源，启用缓存可以显著减少服务器的负载：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* \\.(jpg|jpeg|png|gif|ico|css|js)$ &#123;</span><br><span class=\"line\">    expires 30d;</span><br><span class=\"line\">    add_header Cache-Control &quot;public, no-transform&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>参数作用如下：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>expires</td><td>定义了资源的缓存时间。<code>30d</code> 表示资源将缓存 30 天。</td></tr><tr><td>Cache-Control</td><td><code>public</code> 表示资源可以被任何缓存「如浏览器、CDN等」缓存，<code>no-transform</code> 表示不允许代理服务器对资源进行转换「如压缩等」</td></tr></tbody></table><ol start=\"2\"><li>使用代理缓存</li></ol><p>如使用 Nginx 作为反向代理，可启用代理缓存来缓存后端服务器的响应：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_cache my_cache;</span><br><span class=\"line\">        proxy_pass http://backend;</span><br><span class=\"line\">        proxy_cache_valid 200 302 10m;</span><br><span class=\"line\">        proxy_cache_valid 404 1m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>参数作用如下：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>proxy_cache_path</td><td>定义了缓存存储的路径、缓存键的存储区域、缓存的最大大小及缓存的有效期。</td></tr><tr><td>proxy_cache</td><td>启用缓存并使用指定的缓存区域。</td></tr><tr><td>proxy_cache_valid</td><td>定义不同状态码的缓存时间。</td></tr></tbody></table><ol start=\"3\"><li>使用 <code>gzip</code> 压缩减少网络传输量</li></ol><p><code>gzip</code> 压缩可以显著减少传输数据量，从而加快页面加载速度：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">    gzip_min_length 256;</span><br><span class=\"line\">    gzip_proxied any;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>参数作用如下：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>gzip</td><td>启用压缩。</td></tr><tr><td>gzip_types</td><td>定义了需要压缩的文件类型。通常包括文本文件、CSS&#x2F;JavaScript&#x2F;XML 等。</td></tr><tr><td>gzip_comp_level</td><td>定义压缩级别，范围是 1 到 9。1 是最低的压缩率，9 是最高的压缩率。默认值 <code>6</code>。</td></tr><tr><td>gzip_min_length</td><td>定义最小压缩文件大小。小于这个大小的文件不会被压缩。</td></tr><tr><td>gzip_proxied</td><td>定义了是否对代理请求启用压缩。<code>any</code> 表示对所有代理请求启用压缩。</td></tr><tr><td>gzip_vary</td><td>添加响应，确保代理服务器能正确处理缓存。</td></tr></tbody></table><h2 id=\"HTTP-2-与速率限制\"><a href=\"#HTTP-2-与速率限制\" class=\"headerlink\" title=\"HTTP&#x2F;2 与速率限制\"></a>HTTP&#x2F;2 与速率限制</h2><ol><li>使用 HTTP&#x2F;2 版协议</li></ol><p>HTTP&#x2F;2 提供了多路复用、头部压缩特性，可以显著提升性能：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl http2;</span><br><span class=\"line\">    ssl_certificate /path/to/cert.pem;</span><br><span class=\"line\">    ssl_certificate_key /path/to/key.pem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>参数作用如下：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>http2</td><td>在 <code>listen</code> 指令中添加 <code>http2</code> 参数即可启用。</td></tr></tbody></table><ol start=\"2\"><li>限制请求速率</li></ol><p>为了防止恶意请求或突发流量导致服务器过载，可使用 <code>limit_req</code> 模块限制请求速率：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            limit_req zone=one burst=5;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>参数作用如下：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>limit_req_zone</td><td>定义限流区域。<code>$binary_remote_addr</code> 表示根据客户端的 IP 地址进行限流，<code>rate=1r/s</code> 表每秒允许 <code>1</code> 个请求。</td></tr><tr><td>limit_req</td><td>在指定的位置应用限流。<code>burst=5</code> 表允许突发 <code>5</code> 个请求。</td></tr></tbody></table><h2 id=\"LB-和日志优化\"><a href=\"#LB-和日志优化\" class=\"headerlink\" title=\"LB 和日志优化\"></a>LB 和日志优化</h2><ol><li>负载均衡</li></ol><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    server 192.168.1.1:8080;</span><br><span class=\"line\">    server 192.168.1.2:8080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://backend;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意：通过 <code>upstream</code> 模块可以将请求分发到多个后端服务器，提高并发处理能力。</p><ol start=\"2\"><li>日志优化</li></ol><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access_log /var/log/nginx/access.log main buffer=16k;</span><br><span class=\"line\">error_log /var/log/nginx/error.log warn;</span><br></pre></td></tr></table></figure><p>注意：调整日志级别可减少日志输出量，提升性能。这表示将访问日志的缓冲区大小设置为 16KB，并将错误日志级别设置为 <code>warn</code>。</p>"
  },
  {
    "title": "1Panel 全新移动 APP 上线",
    "author": "杜老师说",
    "date": "2025-06-05T16:00:00.000Z",
    "link": "https://dusays.com/810/",
    "content": "<blockquote><p>1Panel 作为新一代的服务器管理面板，为 Linux 服务器运维提供了一个舒适便捷的 Web 图形界面。为了方便移动办公，1Panel 推出了 APP 移动端，目前还在测试阶段，不过足以满足大多数用户的需求。</p></blockquote><span id=\"more\"></span><h2 id=\"功能满足多样需求\"><a href=\"#功能满足多样需求\" class=\"headerlink\" title=\"功能满足多样需求\"></a>功能满足多样需求</h2><p>1Panel APP 拥有丰富且实用功能特性，涵盖服务器管理的多个重要方面。它支持 Android 和 iOS 系统，确保不同设备用户都能享受到一致的服务体验。用户可以方便地添加多个 1Panel 服务，实现对多台服务器集中管理：</p><p><img src=\"https://cdn.dusays.com/2025/03/810-1.jpg\"></p><p>首页全局概览表盘，以直观的方式展示服务器的关键信息，让用户一眼就能了解服务器整体运行状况：</p><p><img src=\"https://cdn.dusays.com/2025/03/810-2.jpg\"></p><p>应用管理方面，1Panel APP 表现得十分出色。用户不仅能够查看已安装的应用，还能轻松进行安装、配置、管理操作，极大地简化了应用部署和维护的流程：</p><p><img src=\"https://cdn.dusays.com/2025/03/810-3.jpg\"></p><p>对于网站管理，它提供专业的工具，方便用户对网站进行创建和编辑、删除操作，同时支持域名绑定和 SSL 证书配置，确保网站的安全性和稳定性：</p><p><img src=\"https://cdn.dusays.com/2025/03/810-4.jpg\"></p><p>Docker 容器管理是 1Panel APP 的一大亮点。用户可以方便创建、启动、停止、删除容器，还可以对容器的资源进行合理分配和监控，满足了开发者和运维人员在容器化部署方面的需求：</p><p><img src=\"https://cdn.dusays.com/2025/03/810-5.jpg\"></p><p>服务器状态监控功能则让用户实时掌握 CPU、内存、磁盘等资源的使用情况，及时发现潜在性能瓶颈，为服务器优化提供有力依据：</p><p><img src=\"https://cdn.dusays.com/2025/03/810-6.jpg\"></p><h2 id=\"获取使用资格方式\"><a href=\"#获取使用资格方式\" class=\"headerlink\" title=\"获取使用资格方式\"></a>获取使用资格方式</h2><p>目前 1Panel APP 正式版仅支持专业版用户使用，可以通过各大厂家应用商店安装手机端 APP。</p><p>如果还不是 1Panel 专业版用户，又感觉官方的价格太贵，欢迎选择《<a href=\"https://dusays.com/774/\">1Panel 专业版低价租用</a>》数量有限，先到先得！</p>"
  },
  {
    "title": "1Panel自动同步Github仓库",
    "author": "LiuShen's Blog",
    "date": "2025-06-01T06:00:21.000Z",
    "link": "https://blog.liushen.fun/posts/327826ac/",
    "content": "之前使用的是宝塔面板，由于自带webhook，所以可以很方便的同步github仓库，达到更新网站的功能，但是由于目前转移到了1Panel，每次更新文章后都需要手动拉取，略显麻烦，所以研究了一下，最重使用action执行ssh链接并执行命令解决了这个问题。"
  },
  {
    "title": "解释器权限不够的处理思路",
    "author": "杜老师说",
    "date": "2025-05-30T16:00:00.000Z",
    "link": "https://dusays.com/809/",
    "content": "<blockquote><p>当我们在使用 Linux 系统进行开发或者运维工作时，经常遇到一些错误提示。其中一个常见错误是解释器权限不够。这个错误提示表明在运行 <code>targetcli</code> 命令，系统没有足够权限来执行所需的 Python 解释器。在本文中，我们将探讨这个错误原因和解决方法。</p></blockquote><span id=\"more\"></span><h2 id=\"错误原因\"><a href=\"#错误原因\" class=\"headerlink\" title=\"错误原因\"></a>错误原因</h2><p>为理解这个错误的原因，我们需要先了解下 Linux 系统的权限管理机制。</p><p>Linux 系统将用户和组织分为不同的分类，并为每个用户和组织分配不同的权限。这些权限决定用户可以访问和执行哪些文件和目录。</p><p>在这个特定错误中，我们看到了一个错误路径<code>/usr/bin/targetcli</code> 和错误消息<code>/usr/bin/python3:解释器错误:权限不够</code>。</p><p>系统无法在路径<code>/usr/bin/targetcli</code> 下找到所需的 Python 解释器，且没有足够的权限来执行它。</p><h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ol><li>确定缺少的解释器</li></ol><p>首先，我们需确定缺少的 Python 解释器。</p><p>在错误消息中，我们看到了<code>/usr/bin/targetcli</code> 和<code>/usr/bin/python3</code> 两个路径。这告诉我们 <code>targetcli</code> 命令需要 <code>python3</code> 来执行。</p><ol start=\"2\"><li>确定解释器的位置</li></ol><p>接下来我们需要确定 <code>python3</code> 解释器的实际位置。我们可以使用 <code>which</code> 命令来找到解释器的路径。</p><p>可在终端中运行命令 <code>which python3</code>。命令的输出将告诉我们 <code>python3</code> 解释器位置。比如，输出可能是<code>/usr/local/bin/python3</code>。</p><ol start=\"3\"><li>修改 <code>python3</code> 解释器路径</li></ol><p>一旦我们找到了 <code>python3</code> 解释器的位置，我们可以通过修改 <code>targetcli</code> 脚本来更新解释器的路径。</p><p>打开终端并输入命令 <code>sudo vi /usr/bin/targetcli</code>。这将使用编辑器打开 <code>targetcli</code> 脚本。</p><p>在脚本中，我们需要查找<code>#!/usr/bin/python3</code> 这一行，并将其替换为 <code>python3</code> 解释器实际路径。</p><p>在这个例子中，我们可以将其替换为<code>#!/usr/bin/python3</code>。</p><ol start=\"4\"><li>更改脚本权限</li></ol><p>最后，我们需要为 <code>targetcli</code> 脚本提供执行权限。</p><p>可在终端中运行命令 <code>sudo chmod +x /usr/bin/targetcli</code>。如果一切顺利，我们应该不再看到错误消息。</p>"
  },
  {
    "title": "数据库可视化WEB工具对比",
    "author": "LiuShen's Blog",
    "date": "2025-05-25T10:00:21.000Z",
    "link": "https://blog.liushen.fun/posts/7915ee6b/",
    "content": "最近迁移服务器，并且搞了一个1P专业版玩玩，感觉效果很不错，想找一个管理数据库的服务，其中看了phpmyadmin等一些知名项目，但是都不太符合我的要求，最后经过筛选，找到了比较合适的，分享给大家！"
  },
  {
    "title": "dynv6 免费二级域名申请及管理",
    "author": "杜老师说",
    "date": "2025-05-24T16:00:00.000Z",
    "link": "https://dusays.com/808/",
    "content": "<blockquote><p>自飞牛 OS 支持虚拟机后，很多使用飞牛的小伙伴会询问杜老师有关 DDNS 的问题。希望可以白嫖一个二级域名，支持 API 变更解析值，且支持 IPv6 解析。恰好杜老师发现了一个网站，支持多后缀的二级域名白嫖，这里分享给需要的小伙伴们！</p></blockquote><span id=\"more\"></span><h2 id=\"什么是-dynv6\"><a href=\"#什么是-dynv6\" class=\"headerlink\" title=\"什么是 dynv6\"></a>什么是 dynv6</h2><p>dynv6 是一款免费的动态 DNS 服务，其专为 IPv6 设计。</p><p>它允许用户将公共主机名轻松分配给私有主机，从而实现对私有主机的远程访问。</p><p>dynv6 对所有用户免费开放。可以选择一个免费的主机名开始使用，或者将自己的域名委托给 dynv6。</p><p>然而，需要注意的是，dynv6 目前并不提供企业级的 DDoS 防护和 SLA。因此，dynv6 适合用于非关键服务。</p><h2 id=\"强大的-API-支持\"><a href=\"#强大的-API-支持\" class=\"headerlink\" title=\"强大的 API 支持\"></a>强大的 API 支持</h2><p>dynv6 提供多种方式来更新区域，满足不同用户需求。</p><p>其中包括 REST API 和 SSH 以及 DNS 更新。这些 API 的存在，使得 dynv6 的使用更加灵活、方便。</p><p>无论是开发者还是普通用户，都可以根据自己的需求选择合适的 API 来更新 DNS 记录。</p><p>此外，dynv6 支持 Webhooks 功能。当 IP 地址发生变化时 Webhooks 可以用来更新外部服务。</p><h2 id=\"官网地址\"><a href=\"#官网地址\" class=\"headerlink\" title=\"官网地址\"></a>官网地址</h2><p>dynv6 的官网地址如下：</p><div class=\"tag-plugin link dis-select\"><a class=\"link-card plain\" title=\"\" href=\"https://dynv6.com/\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\" cardlink autofill=\"title,icon\"><div class=\"left\"><span class=\"title\">https://dynv6.com/</span><span class=\"cap link footnote\">https://dynv6.com/</span></div><div class=\"right\"><div class=\"lazy img\" data-bg=\"https://jsd.onmicrosoft.cn/gh/cdn-x/placeholder@1.0.12/link/8f277b4ee0ecd.svg\"></div></div></a></div><h2 id=\"使用截图\"><a href=\"#使用截图\" class=\"headerlink\" title=\"使用截图\"></a>使用截图</h2><p>打开上面的官网后，点击右上角 Sign up 进行账号注册：</p><p><img src=\"https://cdn.dusays.com/2025/03/808-1.jpg\"></p><p>完成账号登录后会自动登录，也可通过右上角 Sign in 进行登录。点击 Create new Zone 可白嫖免费二级域名：</p><p><img src=\"https://cdn.dusays.com/2025/03/808-2.jpg\"></p><p>点击下拉框后，可以看到有多个后缀可选择，同时填写 IPv4 或者 IPv6 地址：</p><p><img src=\"https://cdn.dusays.com/2025/03/808-3.jpg\"></p><p>若想托管顶级域名，可以点击导航栏 My Domains：</p><p><img src=\"https://cdn.dusays.com/2025/03/808-4.jpg\"></p>"
  },
  {
    "title": "使用 Docker 部署 tinyMediaManager 刮削工具",
    "author": "杜老师说",
    "date": "2025-05-18T16:00:00.000Z",
    "link": "https://dusays.com/807/",
    "content": "<blockquote><p>杜老师使用 Emby 管理媒体文件，但刮削时经常报错。tinyMediaManager 是款功能强大的开源媒体管理工具，能够帮助轻松整理和管理媒体库。本文将详细介绍 tinyMediaManager 的搭建过程和基本使用方法。</p></blockquote><span id=\"more\"></span><h2 id=\"什么是-tinyMediaManager\"><a href=\"#什么是-tinyMediaManager\" class=\"headerlink\" title=\"什么是 tinyMediaManager\"></a>什么是 tinyMediaManager</h2><p>tinyMediaManager 简称 TMM 是一款用 Java&#x2F;Swing 编写的媒体管理工具，能够为 Jellyfin、Emby 等媒体服务器提供元数据。</p><p>通过 TMM 可以抓取和整理影片详细信息、封面图像、演员列表、导演信息等元数据，让媒体库更加丰富、完整。</p><h2 id=\"搭建准备\"><a href=\"#搭建准备\" class=\"headerlink\" title=\"搭建准备\"></a>搭建准备</h2><p>准备好想要管理的电影、电视剧等媒体文件，并将其存放在一个固定的目录中，方便 TMM 进行扫描和管理。</p><p>我们假设电影文件放入<code>&lt;/path/to/movies&gt;</code>目录中，命令可参考 <code>mkdir &lt;/path/to/movies&gt;</code>。</p><p>电视文件放入<code>&lt;/path/to/tv_shows/&gt;</code>目录中，命令可参考 <code>mkdir &lt;/path/to/tv_shows/&gt;</code>。</p><p>新建数据文件夹<code>&lt;/path/to/local/data/&gt;</code>，命令可参考 <code>mkdir &lt;/path/to/local/data/&gt;</code>。</p><h2 id=\"部署安装\"><a href=\"#部署安装\" class=\"headerlink\" title=\"部署安装\"></a>部署安装</h2><p>这里我们使用 Docker 来部署，<code>docker-compose.yml</code> 的参考内容如下：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">version: &quot;2.1&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  tinymediamanager:</span><br><span class=\"line\">    image: tinymediamanager/tinymediamanager:latest</span><br><span class=\"line\">    container_name: tinymediamanager</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - USER_ID=1000</span><br><span class=\"line\">      - GROUP_ID=100</span><br><span class=\"line\">      - ALLOW_DIRECT_VNC=true</span><br><span class=\"line\">      - LC_ALL=en_US.UTF-8 # force UTF8</span><br><span class=\"line\">      - LANG=en_US.UTF-8   # force UTF8</span><br><span class=\"line\">      - PASSWORD=&lt;password&gt;</span><br><span class=\"line\">      - TZ=Asia/Shanghai</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &lt;/path/to/local/data/&gt;:/data</span><br><span class=\"line\">      - &lt;/path/to/movies&gt;:/media/movies</span><br><span class=\"line\">      - &lt;/path/to/tv_shows/&gt;:/media/tv_shows</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 5900:5900 # VNC port</span><br><span class=\"line\">      - 4000:4000 # Webinterface</span><br><span class=\"line\">    restart: unless-stopped</span><br></pre></td></tr></table></figure><p>将上方代码中<code>&lt;password&gt;</code>改为 TMM 访问密码，配置好后执行如下命令即可：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>第一次启动时，会进入 TMM 设置向导。需要选择媒体类型、设置媒体目录路径、选择元数据来源等。按照向导提示逐步完成设置即可：</p><p><img src=\"https://cdn.dusays.com/2025/03/807-1.jpg\"></p><p>设置完成后 TMM 会自动扫描指定的媒体目录，识别其中媒体文件，并尝试从在线数据库中获取相应的元数据：</p><p><img src=\"https://cdn.dusays.com/2025/03/807-2.jpg\"></p><p>TMM 会根据文件标题到电影资料网站上匹配电影信息，下载电影资料及图片到本地。可以查看和编辑这些元数据，确保信息的准确性和完整性：</p><p><img src=\"https://cdn.dusays.com/2025/03/807-3.jpg\"></p><p>TMM 还可按照一定的规则批量重命名和整理媒体文件，使文件名称更加规范和统一，方便管理、查找：</p><p><img src=\"https://cdn.dusays.com/2025/03/807-4.jpg\"></p>"
  },
  {
    "title": "RSSHub 搭建指南打造个性化资讯中心",
    "author": "杜老师说",
    "date": "2025-05-12T16:00:00.000Z",
    "link": "https://dusays.com/806/",
    "content": "<blockquote><p>RSSHub 可以根据我们的需求生成个性化的 RSS 订阅源，让我们轻松地获取到各种平台的最新资讯。本文将详细介绍 RSSHub 搭建过程，快速搭建起属于自己的资讯中心。</p></blockquote><span id=\"more\"></span><h2 id=\"RSSHub-的简介\"><a href=\"#RSSHub-的简介\" class=\"headerlink\" title=\"RSSHub 的简介\"></a>RSSHub 的简介</h2><p>RSSHub 是一个轻量、易于扩展 RSS 生成器，它基于 Node.js 开发，支持多种平台和类型订阅源，包括但不限于微博、知乎、B 站、GitHub 等。</p><p>通过简单的配置和路由规则，我们就能生成自己想要的 RSS 订阅链接，随时随地获取最新内容更新。</p><h2 id=\"搭建前的准备\"><a href=\"#搭建前的准备\" class=\"headerlink\" title=\"搭建前的准备\"></a>搭建前的准备</h2><p>在开始搭建 RSSHub 之前，我们需做一些准备工作。需一台服务器，可以是云主机，也可以是本地的计算机。服务器需要具备公网 IP 地址，以便我们能够从外部访问搭建好的 RSSHub 服务。</p><p>RSSHub 基于 Docker 部署，因此需要在服务器上安装 Docker 环境。</p><p>RSSHub 支持缓存中间件，如 Redis。</p><p>为方便访问和使用，建议注册一个域名，并将其解析到服务器的 IP 地址上。</p><h2 id=\"RSSHub-的搭建步骤\"><a href=\"#RSSHub-的搭建步骤\" class=\"headerlink\" title=\"RSSHub 的搭建步骤\"></a>RSSHub 的搭建步骤</h2><p>将下面的内容保存为 <code>docker-compose.yml</code> 文件：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span><br><span class=\"line\">    rsshub:</span><br><span class=\"line\">        # two ways to enable puppeteer:</span><br><span class=\"line\">        # * comment out marked lines, then use this image instead: diygod/rsshub:chromium-bundled</span><br><span class=\"line\">        # * (consumes more disk space and memory) leave everything unchanged</span><br><span class=\"line\">        image: diygod/rsshub</span><br><span class=\"line\">        restart: always</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">            - &quot;1200:1200&quot;</span><br><span class=\"line\">        environment:</span><br><span class=\"line\">            NODE_ENV: production</span><br><span class=\"line\">            CACHE_TYPE: redis</span><br><span class=\"line\">            REDIS_URL: &quot;redis://redis:6379/&quot;</span><br><span class=\"line\">            PUPPETEER_WS_ENDPOINT: &quot;ws://browserless:3000&quot; # marked</span><br><span class=\"line\">        healthcheck:</span><br><span class=\"line\">            test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:1200/healthz&quot;]</span><br><span class=\"line\">            interval: 30s</span><br><span class=\"line\">            timeout: 10s</span><br><span class=\"line\">            retries: 3</span><br><span class=\"line\">        depends_on:</span><br><span class=\"line\">            - redis</span><br><span class=\"line\">            - browserless # marked</span><br><span class=\"line\"></span><br><span class=\"line\">    browserless: # marked</span><br><span class=\"line\">        image: browserless/chrome # marked</span><br><span class=\"line\">        restart: always # marked</span><br><span class=\"line\">        ulimits: # marked</span><br><span class=\"line\">            core: # marked</span><br><span class=\"line\">                hard: 0 # marked</span><br><span class=\"line\">                soft: 0 # marked</span><br><span class=\"line\">        healthcheck:</span><br><span class=\"line\">            test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:3000/pressure&quot;]</span><br><span class=\"line\">            interval: 30s</span><br><span class=\"line\">            timeout: 10s</span><br><span class=\"line\">            retries: 3</span><br><span class=\"line\"></span><br><span class=\"line\">    redis:</span><br><span class=\"line\">        image: redis:alpine</span><br><span class=\"line\">        restart: always</span><br><span class=\"line\">        volumes:</span><br><span class=\"line\">            - redis-data:/data</span><br><span class=\"line\">        healthcheck:</span><br><span class=\"line\">            test: [&quot;CMD&quot;, &quot;redis-cli&quot;, &quot;ping&quot;]</span><br><span class=\"line\">            interval: 30s</span><br><span class=\"line\">            timeout: 10s</span><br><span class=\"line\">            retries: 5</span><br><span class=\"line\">            start_period: 5s</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">    redis-data:</span><br></pre></td></tr></table></figure><p>使用下面命令来启动 RSSHub 服务：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure><p>如需拉取新版 RSSHub 的镜像，可使用下面的命令：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose pull</span><br></pre></td></tr></table></figure><p>如需停止服务，可使用下面的命令：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down</span><br></pre></td></tr></table></figure><p>如果不喜欢使用 Docker Compose 部署，可使用下面的命令运行有 Puppeteer 依赖的 RSSHub 服务：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name rsshub -p 1200:1200 diygod/rsshub:chromium-bundled</span><br></pre></td></tr></table></figure><p>可使用下面的命令运行无 Puppeteer 依赖的 RSSHub 服务：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name rsshub -p 1200:1200 diygod/rsshub</span><br></pre></td></tr></table></figure><h2 id=\"为-Follow-添加实例\"><a href=\"#为-Follow-添加实例\" class=\"headerlink\" title=\"为 Follow 添加实例\"></a>为 Follow 添加实例</h2><p>如果使用 Follow 调用 RSSHub 示例，需在 <code>docker-compose.yml</code> 中添加一些变量。其中 <code>FOLLOW_OWNER_USER_ID</code> 是指您的关注账户 ID 或用户名；<code>FOLLOW_DESCRIPTION</code> 指实例描述；<code>FOLLOW_PRICE</code> 指实例月费，如设为 0 表示免费；<code>FOLLOW_USER_LIMIT</code> 指实例用户限制，将其设置为 0 或 1 可将实例设为私有，留空则表示无限制；<code>ACCESS_KEY</code> 指访问密钥：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span><br><span class=\"line\">    rsshub:</span><br><span class=\"line\">        image: diygod/rsshub:chromium-bundled</span><br><span class=\"line\">        restart: always</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">            - &quot;1200:1200&quot;</span><br><span class=\"line\">        environment:</span><br><span class=\"line\">            NODE_ENV: production</span><br><span class=\"line\">            FOLLOW_OWNER_USER_ID=杜老师说</span><br><span class=\"line\">            FOLLOW_DESCRIPTION=大带宽境外服务器</span><br><span class=\"line\">            FOLLOW_PRICE=1</span><br><span class=\"line\">            FOLLOW_USER_LIMIT=1000</span><br><span class=\"line\">            ACCESS_KEY=ubzG7H3t9TJaFp</span><br><span class=\"line\">        healthcheck:</span><br><span class=\"line\">            test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:1200/healthz&quot;]</span><br><span class=\"line\">            interval: 30s</span><br><span class=\"line\">            timeout: 10s</span><br><span class=\"line\">            retries: 3</span><br></pre></td></tr></table></figure><p>登录 Follow 后，点击头像，选择 RSSHub 项。在显示页面中，点添加新实例。依次输入 RSSHub 的地址，访问密钥，最后点击添加即可：</p><p><img src=\"https://cdn.dusays.com/2025/03/806-1.jpg\"></p>"
  },
  {
    "title": "本地实现HEXO文章AI摘要",
    "author": "LiuShen's Blog",
    "date": "2025-05-06T16:00:21.000Z",
    "link": "https://blog.liushen.fun/posts/40702a0d/",
    "content": "五一假期结束啦！这五天啥也没干，就在宿舍敲代码，都快无聊死了，恰逢找到了一些免费API，就自己实现一个AI摘要吧！利用API生成摘要文本放在文章头部，再通过hexo进行渲染就好啦！"
  },
  {
    "title": "加密 NFS 搭建保障数据传输与存储安全",
    "author": "杜老师说",
    "date": "2025-05-06T16:00:00.000Z",
    "link": "https://dusays.com/805/",
    "content": "<blockquote><p>在现代企业环境中，数据的安全性至关重要。NFS 作为一种广泛使用的文件共享协议，其数据在传输和存储过程中若是缺乏加密保护，将面临被窃取或篡改的风险。本文将详细介绍加密 NFS 搭建过程。</p></blockquote><span id=\"more\"></span><h2 id=\"NFS-的简介\"><a href=\"#NFS-的简介\" class=\"headerlink\" title=\"NFS 的简介\"></a>NFS 的简介</h2><p>NFS 是允许用户通过网络访问远程文件系统，就像访问本地文件系统一样方便。</p><p>它支持跨平台文件共享，广泛应用于 Linux 和 Unix 系统。</p><p>然而，传统的 NFS 传输数据时以明文形式在网络中传输，很容易受到中间人攻击和数据泄露的威胁。</p><p>在 NFS 的基础上，我们可以使用加密技术来保护数据传输和存储。</p><h2 id=\"加密-NFS-必要性\"><a href=\"#加密-NFS-必要性\" class=\"headerlink\" title=\"加密 NFS 必要性\"></a>加密 NFS 必要性</h2><p>随着数据安全法规的日益严格和企业对数据保护的重视，对 NFS 进行加密变得必不可少。</p><p>在企业中，NFS 的加密功能可以提供数据传输和存储的安全保障。</p><p>加密 NFS 可有效防止数据在传输过程中被窃取或篡改，确保数据的完整性和机密性。</p><p>同时，它也可以满足企业对数据安全合规的要求，为企业的数据资产提供更可靠的保护。</p><h2 id=\"搭建加密-NFS-的步骤\"><a href=\"#搭建加密-NFS-的步骤\" class=\"headerlink\" title=\"搭建加密 NFS 的步骤\"></a>搭建加密 NFS 的步骤</h2><p>在 NFS 服务器安装支持加密的 NFS 软件包。例如，在基于 Debian 的系统上，可以使用下面命令进行安装：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt -y install nfs-kernel-server</span><br></pre></td></tr></table></figure><p>使用下面的命令编辑 NFS 配置文件，添加加密相关选项。例如，可使用 <code>sec = krb5i</code> 或 <code>sec = krb5p</code> 选项来启用 Kerberos 加密。其中，<code>krb5i</code> 提供数据完整性保护，而 <code>krb5p</code> 则同时提供了数据加密和完整性保护：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/exports</span><br></pre></td></tr></table></figure><p>在配置文件中指定要共享的目录及其访问权限。这表示允许客户端 IP 以读写模式访问共享目录，并启用 Kerberos 加密。例如：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/path/to/shared/directory client_ip(rw,sync,no_subtree_check,sec=krb5i)</span><br></pre></td></tr></table></figure><p>完成配置后重启 NFS 服务。可以使用下面命令重启服务：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nfs-kernel-server</span><br></pre></td></tr></table></figure><p>使用下面的命令使配置文件生效：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports -rv</span><br></pre></td></tr></table></figure><p>在需访问加密 NFS 共享的客户端上安装 NFS 客户端软件。例如，在基于 Debian 的系统上，可以使用下面命令进行安装：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt -y install nfs-common</span><br></pre></td></tr></table></figure><p>使用挂载命令将加密的 NFS 共享挂载到本地目录。这将把服务器上的共享目录挂载到客户端本地目录，并启用 Kerberos 加密。例如：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t nfs4 -o sec=krb5i server_ip:/path/to/shared/directory /local/mount/point</span><br></pre></td></tr></table></figure><p>使用下面命令查看挂载文件系统，确保加密 NFS 共享已成功挂载：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h </span><br></pre></td></tr></table></figure><h2 id=\"加密-NFS-优势与注意事项\"><a href=\"#加密-NFS-优势与注意事项\" class=\"headerlink\" title=\"加密 NFS 优势与注意事项\"></a>加密 NFS 优势与注意事项</h2><p>加密 NFS 有多种优势，例如数据加密传输、身份认证和数据完整性保护等等。</p><p>它能够有效防止数据泄露和篡改，提高数据的安全性。</p><p>然而，在搭建加密 NFS 时也需要注意一些事项。</p><p>首先，加密过程可能会增加系统的性能开销，因此需根据实际需求进行性能评估和优化。</p><p>其次，配置过程较为复杂，需仔细检查配置文件和参数设置，确保正确无误。</p><p>此外，还需要定期更新加密软件和认证机制，以应对不断变化的安全威胁。</p>"
  },
  {
    "title": "去不图床数据清理通知",
    "author": "杜老师说",
    "date": "2025-04-30T16:00:00.000Z",
    "link": "https://dusays.com/804/",
    "content": "<blockquote><p>近期发现外链流量激增，经分析了解并非是攻击导致，通过 URL 判断其来源是一些匿名及到期用户所上传的图片。因此决定发文公告：清理去不图床所有匿名用户所上传的图片，并周期检查已到期用户。</p></blockquote><span id=\"more\"></span><h2 id=\"免费服务的初心与挑战\"><a href=\"#免费服务的初心与挑战\" class=\"headerlink\" title=\"免费服务的初心与挑战\"></a>免费服务的初心与挑战</h2><p>2019 年，去不图床怀着为各位小伙伴提供免费、便捷图片托管服务赤子之心，正式上线！</p><p>那会儿杜老师的目标就是给大伙儿搭个稳定可靠的平台，让大家轻轻松松的分享图片，舒舒服服存储图片。</p><p>这服务的确是受到了大家的一致好评，用户数量跟图片上传量，那叫一个节节攀升，直冲云霄！</p><p>可是好景不长，随着用户规模像滚雪球一样越滚越大，这流量成本也成了杜老师心头一块大石头。</p><p>图片托管需要海量的带宽和存储空间，这费用那是哗哗地往外流啊！</p><p>杜老师也是一直在绞尽脑汁优化成本，可那流量费用，像脱缰的野马，一发不可收拾，最终，在 2021 年不得不调整策略，从免费转向了收费，这都是为了咱这平台能继续坚挺地活下去！</p><h2 id=\"流量成本与运营的压力\"><a href=\"#流量成本与运营的压力\" class=\"headerlink\" title=\"流量成本与运营的压力\"></a>流量成本与运营的压力</h2><p>虽然 2021 年去不图床改成收费模式，但之前游客用户免费上传的图片，一直没有清理。</p><p>这些图片，虽然丰富了平台的内容，但是占用的存储空间和流量资源，那也是相当可观啊！</p><p>据统计游客上传的图片数量，那简直是天文数字，而且很多图片访问频率低得可怜，却依然霸占着咱宝贵的存储资源！</p><p>随着平台业务蒸蒸日上，对流量成本的控制也越来越严格。</p><p>现在运营环境，杜老师得精打细算，合理分配资源，保证已兑换容量的小伙伴能享受到更优质、更稳定的服务。</p><p>所以，经过一番深思熟虑，杜老师决定对游客用户的图片进行清理啦！</p><h2 id=\"匿名用户上传图片清理\"><a href=\"#匿名用户上传图片清理\" class=\"headerlink\" title=\"匿名用户上传图片清理\"></a>匿名用户上传图片清理</h2><p>为了降低流量以及存储损耗，优化资源分配，杜老师将于 2025 年 3 月 1 日起，清理所有游客用户上传图片。</p><p>这个决定，杜老师也是万般的无奈，但这是目前运营环境下，必须采取的措施啊！</p><p>希望各位游客用户能够理解杜老师的苦衷，赶紧备份需要保存的图片吧！如有疑问，欢迎随时在评论区留言！</p><p>游客数据保留至本月中「2025 年 3 月 15 日」因为无法进行用户判定，所以杜老师已经整体打包备份了，需要的小伙伴可留言索要图片压缩包。</p><h2 id=\"到期用户上传图片清理\"><a href=\"#到期用户上传图片清理\" class=\"headerlink\" title=\"到期用户上传图片清理\"></a>到期用户上传图片清理</h2><p>为了进一步降低流量及存储损耗，优化资源分配，杜老师将于 2025 年 3 月 15 日起，清理所有到期用户上传图片。</p><p>已到期的用户数据清理规则如下：当月 15 日之前到期用户，数据保留至当月的最后一天；当月 15 日之后到期用户，数据保留至下个月月中。</p><p>数据清理之前，杜老师都会邮件通知用户进行再续费，通知七天后未续费则会清理数据「即当月 15 日之前到期的用户，会在当月 23 日发送通知；当月 15 日之后到期用户，会在次月 8 日发送通知」</p><p>注意图片清理是多节点同步执行，不会保留备份数据！最终解释权归去不图床所有。</p>"
  },
  {
    "title": "耗子面板和DPanel简单体验",
    "author": "LiuShen's Blog",
    "date": "2025-04-28T14:47:21.000Z",
    "link": "https://blog.liushen.fun/posts/5f71a4b1/",
    "content": "最近毕业设计临近尾声，代码也敲完了，目前就剩稍微的调优，就可以开始写论文啦！在闲暇时间，我也尝试部署了一些不一样的面板程序，总感觉1panel稍微有些复杂，很多功能并用不上，比如GPU，下面简单分享一下我的体验。"
  },
  {
    "title": "使用 Python 脚本验证指定目录的图片文件",
    "author": "杜老师说",
    "date": "2025-04-24T16:00:00.000Z",
    "link": "https://dusays.com/803/",
    "content": "<blockquote><p>有小伙伴说杜老师说侧边栏随机图片素材太少，翻来覆去只有那么几张。为了充实随机图片，杜老师采集了一个图片网站。奈何能力有限，某些图片采集失败，保存为空文件，所以需要编写一个脚本，来验证图片是否为正常。</p></blockquote><span id=\"more\"></span><h2 id=\"代码需求\"><a href=\"#代码需求\" class=\"headerlink\" title=\"代码需求\"></a>代码需求</h2><p>使用 Python 语言编写一个小项目，需要遍历指定目录下所有子目录「子目录名称为中文」</p><p>验证子目录下的图片文件是否能正常打开，如果能则跳过，如果无法正常打开则返回其路径。</p><h2 id=\"变更解释\"><a href=\"#变更解释\" class=\"headerlink\" title=\"变更解释\"></a>变更解释</h2><ol><li><p>使用 <code>os</code> 模块来遍历目录和子目录；</p></li><li><p>使用 <code>PIL</code> 库来验证图片文件是否能正常打开。</p></li></ol><h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>请确保安装了 Pillow 库，可以使用下面的命令来安装：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pillow</span><br></pre></td></tr></table></figure><p>将 <code>root_directory</code> 变量设置为需要遍历的目录路径：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">from PIL import Image</span><br><span class=\"line\"></span><br><span class=\"line\">def validate_images_in_directory(root_dir):</span><br><span class=\"line\">    invalid_image_paths = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    for dirpath, dirnames, filenames in os.walk(root_dir):</span><br><span class=\"line\">        for filename in filenames:</span><br><span class=\"line\">            if filename.lower().endswith((&#x27;.png&#x27;, &#x27;.jpg&#x27;, &#x27;.jpeg&#x27;, &#x27;.gif&#x27;, &#x27;.bmp&#x27;)):</span><br><span class=\"line\">                file_path = os.path.join(dirpath, filename)</span><br><span class=\"line\">                try:</span><br><span class=\"line\">                    with Image.open(file_path) as img:</span><br><span class=\"line\">                        img.verify()  # 尝试验证图片文件</span><br><span class=\"line\">                except (IOError, SyntaxError) as e:</span><br><span class=\"line\">                    invalid_image_paths.append(file_path)</span><br><span class=\"line\">    </span><br><span class=\"line\">    return invalid_image_paths</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    root_directory = &#x27;指定目录路径&#x27;  # 替换为实际的目录路径</span><br><span class=\"line\">    invalid_images = validate_images_in_directory(root_directory)</span><br><span class=\"line\">    </span><br><span class=\"line\">    if invalid_images:</span><br><span class=\"line\">        print(&quot;无法打开的图片文件路径：&quot;)</span><br><span class=\"line\">        for path in invalid_images:</span><br><span class=\"line\">            print(path)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;所有图片文件都能正常打开。&quot;)</span><br></pre></td></tr></table></figure><h2 id=\"执行代码\"><a href=\"#执行代码\" class=\"headerlink\" title=\"执行代码\"></a>执行代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 images.py</span><br></pre></td></tr></table></figure><p>注意：将上面的代码保存为 <code>images.py</code> 文件，然后在命令行中执行上面的命令。</p>"
  },
  {
    "title": "探索 Linux 内存占用找出最吃内存的进程",
    "author": "杜老师说",
    "date": "2025-04-18T16:00:00.000Z",
    "link": "https://dusays.com/802/",
    "content": "<blockquote><p>无论是服务器还是个人电脑，了解哪些进程占用了最多的内存，对于系统管理员和普通用户来说至关重要。不仅可以帮助我们优化系统性能，还能避免因内存不足而导致系统崩溃。本文将介绍如何在 Linux 系统中统计内存占用最多的前 10 个进程。</p></blockquote><span id=\"more\"></span><h2 id=\"为什么要统计内存占用\"><a href=\"#为什么要统计内存占用\" class=\"headerlink\" title=\"为什么要统计内存占用\"></a>为什么要统计内存占用</h2><p>多任务操作系统中，内存是有限的资源。</p><p>当多个进程同时运行时，它们会争夺有限的内存空间。</p><p>如果某些进程占用内存过多，可能导致系统响应变慢，甚至出现内存不足错误。</p><p>因此，定期检查内存占用情况，找出占用最多进程，可以帮助我们更好管理资源，优化系统性能。</p><h2 id=\"使用命令工具统计内存占用\"><a href=\"#使用命令工具统计内存占用\" class=\"headerlink\" title=\"使用命令工具统计内存占用\"></a>使用命令工具统计内存占用</h2><p>使用 <code>ps</code> 和 <code>sort</code> 的命令组合：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -eo pid,comm,%mem --sort=-%mem | head -n 11</span><br></pre></td></tr></table></figure><p>解释：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>ps -eo pid,comm,%mem</td><td>列出所有进程的 PID、进程名称和内存占用百分比。</td></tr><tr><td>–sort&#x3D;-%mem</td><td>按内存占用百分比降序排序。</td></tr><tr><td>head -n 11</td><td>显示前 11 行的内容「第一行是标题，接下来是前 10 个进程的信息」</td></tr></tbody></table><p>虽然 <code>top</code> 命令主要用于实时的监控系统资源，但也可通过以下方式快速查看内存占用最多的进程：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top -o %MEM -b -n 1 | head -n 18</span><br></pre></td></tr></table></figure><p>解释：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-o %MEM</td><td>按照内存占用排序。</td></tr><tr><td>-b</td><td>以批处理模式运行，输出到终端上。</td></tr><tr><td>-n 1</td><td>只需运行一次。</td></tr><tr><td>head -n 18</td><td>过滤出前 18 行「因为 top 输出的前几行是系统信息，实际进程从第 8 行开始」</td></tr></tbody></table><p>如果需要更详细的内存占用信息，可结合 <code>pmap</code> 命令：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -eo pid,%mem,comm --sort=-%mem | head -n 11 | awk &#x27;&#123;print $1&#125;&#x27; | xargs -I &#123;&#125; pmap &#123;&#125; | grep total</span><br></pre></td></tr></table></figure><p>解释：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>ps -eo pid,%mem,comm –sort&#x3D;-%mem</td><td>获取内存占用最高的进程 PID。</td></tr><tr><td>awk ‘{print $1}’</td><td>提取 PID 进程号。</td></tr><tr><td>xargs -I {} pmap {}</td><td>获取每个进程详细内存映射信息。</td></tr><tr><td>grep total</td><td>过滤 total 行，显示每个进程的总内存占用情况。</td></tr></tbody></table><p>如果系统安装了 <code>smem</code> 工具，可以更直观地查看内存占用：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smem -s rss -c &quot;pid user command rss&quot; --sort=rss | head -n 11</span><br></pre></td></tr></table></figure><p>解释：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-s rss</td><td>按 RSS 排序。</td></tr><tr><td>-c “pid user command rss”</td><td>指定显示的列。</td></tr><tr><td>–sort&#x3D;rss</td><td>按 RSS 排序。</td></tr><tr><td>head -n 11</td><td>显示前 11 行的内容。</td></tr></tbody></table><h2 id=\"如何分析内存占用情况\"><a href=\"#如何分析内存占用情况\" class=\"headerlink\" title=\"如何分析内存占用情况\"></a>如何分析内存占用情况</h2><p>确认进程是否必要。有些进程可能是系统正常运行所必需，例如 systemd 等。这些进程通常不会占用过多内存。然而，如果某些进程是用户启动的，如某个应用程序或脚本，需确认它们是否在正常运行。</p><p>检查进程是否内存泄漏。如某个进程的内存占用持续增加，可能是内存泄漏导致的。内存泄漏是指程序在申请内存后，无法正确释放已分配的内存，导致内存占用不断增加。这种情况下需要检查程序的代码，查找可能导致内存泄漏地方。</p><p>限制进程内存使用。如果某个进程占用过多内存，但又不能轻易终止，可以尝试限制它的内存使用。</p><p>Linux 提供 <code>ulimit</code> 命令，可设置进程的资源限制。例如，限制某个进程的最大内存使用量为 1GB，可使用命令 <code>ulimit -m 1048576</code>。</p><h2 id=\"内存管理其它技巧\"><a href=\"#内存管理其它技巧\" class=\"headerlink\" title=\"内存管理其它技巧\"></a>内存管理其它技巧</h2><p>除了统计内存占用最多进程，还可通过以下方式优化 Linux 系统的内存管理。</p><p>调整交换空间。交换空间是磁盘上的一部分空间，当物理内存不足时，系统会将一些不常用的内存页面移到交换空间。虽然使用交换空间可以避免系统崩溃，但磁盘速度远慢于内存，因此过多地使用交换空间会导致系统性能下降。</p><p>可以通过命令 <code>swapon --show</code> 查看交换空间的使用情况。如果交换空间使用过多，可以考虑增加物理内存，或者调整交换空间大小。</p><p>使用内存清理工具。Linux 系统会自动管理内存分配、回收，但有时也可以手动清理内存。</p><p>例如，可以使用 <code>sync</code> 命令将缓存数据写入磁盘，然后用 <code>echo 3 &gt; /proc/sys/vm/drop_caches</code> 命令清理缓存。</p><p>但请注意，这种方法可能会对系统性能产生一定影响，因此需要谨慎使用。</p>"
  },
  {
    "title": "美化你的RSS订阅地址",
    "author": "LiuShen's Blog",
    "date": "2025-04-18T12:47:21.000Z",
    "link": "https://blog.liushen.fun/posts/caee2d9f/",
    "content": "近期天天忙着毕业设计，冷落了站点文章的更新，最近也终于算是快要搞完了，于是开始捣鼓一些好玩的东西，在浏览阮一峰大佬的周刊时，了解到了RSS也能美化，折腾了一下，没想到还真实现了，在此分享一下。"
  },
  {
    "title": "使用 SlimToolkit 打造更小的容器镜像",
    "author": "杜老师说",
    "date": "2025-04-12T16:00:00.000Z",
    "link": "https://dusays.com/801/",
    "content": "<blockquote><p>现在容器技术很火，镜像又肥又大，部署较慢不说，安全风险还蹭蹭往上窜，简直让人头大！SlimToolkit 就像一位经验老道的镜像瘦身大师，能把镜像体积缩小到令人咋舌的程度，最多能瘦 30 倍！</p></blockquote><span id=\"more\"></span><h2 id=\"到底是啥\"><a href=\"#到底是啥\" class=\"headerlink\" title=\"到底是啥\"></a>到底是啥</h2><p>简单来说，SlimToolkit 就是一个开源的镜像减肥专家，它能智能分析镜像，找出那些又大又没用的文件、库和依赖，然后干净利落地咔嚓下，统统删掉！</p><p>就像一位技艺精湛的雕塑家，将冗余的部分精雕细琢，留下最精髓的部分。</p><p>之前叫 DockerSlim，现在已经是云原生计算基金会沙盒项目了，实力是杠杠的！</p><p>它的核心思想就是原封不动优化，通过动态、静态分析，自动识别并移除镜像里垃圾文件。</p><p>支持 Docker 以及 Kubernetes，各种类云原生工具，妥妥全能选手！</p><p>不只瘦身，还可以提供命令行工具，方便检查、调试、管理镜像，简直贴心到家！</p><h2 id=\"SlimToolkit-的绝活\"><a href=\"#SlimToolkit-的绝活\" class=\"headerlink\" title=\"SlimToolkit 的绝活\"></a>SlimToolkit 的绝活</h2><ol><li><p>镜像瘦身大法：这是它的看家本领！它能像一位经验丰富的裁缝，精准剪裁镜像，去除冗余部分。如一个基于 Ubuntu 的 Python 应用，原本约 438MB，经过它的一通操作，能瘦到 16.8MB，足足瘦了 26 倍！</p></li><li><p>安全防护专家：它不仅能瘦身，还可以增强安全性！它可以自动生成 Seccomp 和 AppArmor 安全配置文件，像给容器穿上了一层坚不可摧的盔甲，限制系统调用，防止各种安全漏洞入侵。再也不用担心容器被黑客攻破了！</p></li><li><p>动态分析、调试：它就像一位经验丰富的侦探，可以创建一个临时容器模拟运行环境，通过 HTTP 探针等方式收集运行数据，分析应用程序行为，确保瘦身后的镜像依然可以正常工作。而且，它还提供调试工具，在优化后的容器中运行调试命令，排查问题方便！</p></li><li><p>无缝集成：它就像一位老练的管家，能无缝集成到开发和部署流程中。不用改动 Dockerfile 或构建工具，只需在构建过程中添加 SlimToolkit 的优化步骤即可。还支持各种 CI&#x2F;CD 工具，如 Jenkins、GitHub Actions 等，自动化部署 so easy！</p></li></ol><h2 id=\"上手玩转\"><a href=\"#上手玩转\" class=\"headerlink\" title=\"上手玩转\"></a>上手玩转</h2><p>先安装 SlimToolkit。SlimToolkit 提供了多种安装方式，含直接下载二进制文件、使用脚本安装或通过 Docker 运行。对于大多数的用户，使用脚本安装是最简单方式：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL https://raw.githubusercontent.com/slimtoolkit/slim/master/scripts/install-slim.sh | sudo -E bash -</span><br></pre></td></tr></table></figure><p>优化容器镜像。假设已经有一个 Docker 镜像，如一个基于 Python 的 Web 应用。可使用以下命令对镜像进行优化：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slim build my/sample-python-app</span><br></pre></td></tr></table></figure><p>SlimToolkit 会自动创建一个临时容器，运行动态分析，并生成优化后镜像。优化后的镜像名称会自动加上<code>.slim</code> 后缀，例如：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my/sample-python-app.slim</span><br></pre></td></tr></table></figure><p>验证优化效果。优化完成后可以使用以下命令查看优化后镜像大小：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure><h2 id=\"SlimToolkit-的优势\"><a href=\"#SlimToolkit-的优势\" class=\"headerlink\" title=\"SlimToolkit 的优势\"></a>SlimToolkit 的优势</h2><ol><li><p>自动与智能化：它能够自动识别容器中不必要的部分，并且进行优化，无需开发者手动修改 Dockerfile 或者删除文件。这种自动化不仅节省了时间，还减少了人为错误的可能性。</p></li><li><p>安全：通过生成 Seccomp 和 AppArmor 的配置文件，SlimToolkit 为容器提供了额外的安全保障。这些配置文件能够限制容器系统调用，防止潜在安全威胁，而无需开发者深入了解安全框架细节。</p></li><li><p>无缝集成：SlimToolkit 设计目标是无缝集成到现有的开发和部署流程中。它支持多种容器运行时和 CI&#x2F;CD 工具，能够轻松集成到自动化构建和部署流程中。开发者无需改变现有的工具链或工作流程，即可享受 SlimToolkit 带来的优化效果。</p></li><li><p>开源：完全开源，社区活跃，有问必答！</p></li></ol>"
  },
  {
    "title": "PaddleYOLO训练自己的数据集",
    "author": "LiuShen's Blog",
    "date": "2025-04-08T07:27:21.000Z",
    "link": "https://blog.liushen.fun/posts/4bb33804/",
    "content": "近期一直在研究毕业设计，在其中，我涉及到了PaddleYOLO的训练和部署，在网上的教程较少，经过不断努力，我也算是跑出来了，所以在这里分享出来做个记录，防止下次使用又忘记了怎么搞。"
  },
  {
    "title": "图片为啥用 Base64 格式进行传输",
    "author": "杜老师说",
    "date": "2025-04-06T16:00:00.000Z",
    "link": "https://dusays.com/800/",
    "content": "<blockquote><p>在互联网的世界里，图片传输是再平常不过的事情了，而 Base64 格式常常出现在这一过程中。那为啥图片要用 Base64 格式来传输呢？这背后有不少门道。本文将介绍 Base64 格式的应用场景和优点，以及一些应用场景下的缺点。</p></blockquote><span id=\"more\"></span><h2 id=\"Base64-是什么\"><a href=\"#Base64-是什么\" class=\"headerlink\" title=\"Base64 是什么\"></a>Base64 是什么</h2><p>Base64 是种用 64 个可打印字符来表示二进制数据的编码方法。这 64 个字符含大小写字母各 26 个，还有 10 个数字以及两个符号。</p><p>例如，当我们看到一串像 SGVsbG8gV29ybGQh 这样的字符，这就是 Base64 编码后的结果，其实代表了 Hello World！</p><h2 id=\"易于文本传输\"><a href=\"#易于文本传输\" class=\"headerlink\" title=\"易于文本传输\"></a>易于文本传输</h2><p>在很多网络传输场景中，尤其是早期的网络应用，传输通道主要被设计为传输文本数据。</p><p>因为文本数据格式相对简单、统一，而且不容易出现乱码等问题。</p><p>而图片是二进制的数据，直接传输二进制数据可能会因为不同系统、不同软件对二进制数据的处理方式不同而出现问题。</p><p>Base64 把图片的二进制数据转换成了文本形式。这样一来，通过电子邮件、网页表单等主要以文本传输为主的渠道时，图片就可以顺利跟着文本一起传输了。</p><p>比如，在发送带有图片附件的电子邮件，邮件系统会把图片转换成 Base64 格式，然后和邮件的正文一起发送。</p><p>接收方收到邮件后，邮件客户端再把 Base64 格式的数据转换回图片，这样我们就能看到图片。</p><h2 id=\"兼容性好\"><a href=\"#兼容性好\" class=\"headerlink\" title=\"兼容性好\"></a>兼容性好</h2><p>不同的操作系统和不同的软件应用对数据处理方式可能存在差异。Base64 编码后的文本数据在各种平台都能被正确识别和处理。</p><p>例如，一个在 Windows 系统上生成的 Base64 编码的图片数据，在 Linux 服务器上也能轻松解码并还原成图片，不用担心因为平台不同而出现数据损坏或者无法读取的情况。</p><p>几乎所有的编程语言都有内置的库或者函数来处理 Base64 编码和解码。这使得开发人员在开发涉及图片传输的应用程序时，能够很方便使用 Base64 格式。</p><p>比如，在一个基于 Python 的 Web 应用，开发人员可以使用库轻松地将图片文件读取并编码为 Base64 格式，然后通过网络发送给服务器或客户端。</p><h2 id=\"方便在网页中嵌入图片\"><a href=\"#方便在网页中嵌入图片\" class=\"headerlink\" title=\"方便在网页中嵌入图片\"></a>方便在网页中嵌入图片</h2><p>在网页设计中，如果一个网页中有大量的小图标或小图片，每次加载这些图片都需要发送一个 HTTP 请求。</p><p>这不仅会增加服务器的负担，还会影响网页加载速度。</p><p>而将这些小图片转换为 Base64 格式后，可以直接将 Base64 编码的数据嵌入到 HTML 或 CSS 文件中。</p><p>这样浏览器在加载 HTML 或 CSS 文件的时候，就可以直接读取到图片数据，而不需要单独发送 HTTP 请求去获取图片，从而提高了网页的加载效率。</p><p>嵌入 Base64 格式的图片还可以简化网页的结构。不需要在网页文件目录中单独存放这些小图片文件，减少了文件管理复杂性。</p><p>对于一些简单的网页应用或前端框架，这种方式非常实用。</p><h2 id=\"安全性的考虑\"><a href=\"#安全性的考虑\" class=\"headerlink\" title=\"安全性的考虑\"></a>安全性的考虑</h2><p>虽然 Base64 编码不能算是真正的加密方法，但它在一定程度上可起到隐藏信息的作用。</p><p>因为对于不了解 Base64 编码的人来说，看到一串 Base64 编码的数据可能不知道它代表的是图片内容。</p><p>在一些对安全性要求不是特别高的场景下，可作为一种简单的保护措施。</p><p>比如，在一些内部文档分享系统中，把图片转换 Base64 格式传输，可防止非授权用户轻易地获取到原始图片文件。</p><p>在某些情况下，直接传输二进制图片文件可能会带来安全风险，如图片文件可能被恶意篡改，包含恶意代码。</p><p>将图片转换为 Base64 格式后，这些恶意代码在 Base64 编码文本环境中很难被执行，从而降低安全风险。</p><h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><p>不过，Base64 传输图片也有其缺点。比如，Base64 编码后数据量比原始的二进制图片数据要大，大概会增加百分之三十三左右的大小。</p><p>所以在传输大图片或者对带宽要求很高的场景，可能需要权衡下是否使用 Base64 格式。</p>"
  },
  {
    "title": "DPanel 让 Docker 管理变得轻松又高效",
    "author": "杜老师说",
    "date": "2025-03-31T16:00:00.000Z",
    "link": "https://dusays.com/799/",
    "content": "<blockquote><p>Docker 作为容器化领域的佼佼者，其强大的功能和灵活性，赢得众多开发者的青睐。然而，对于许多用户来说，Docker 的命令行操作可能显得有些复杂和繁琐。幸运的是，DPanel 的出现为 Docker 的管理和使用带来了全新的体验。</p></blockquote><span id=\"more\"></span><h2 id=\"什么是-DPanel\"><a href=\"#什么是-DPanel\" class=\"headerlink\" title=\"什么是 DPanel\"></a>什么是 DPanel</h2><p>DPanel 是一款轻量化的 Docker 可视化管理面板，专为简化容器的管理而设计。它提供一套完善的容器管理功能，让用户可通过直观的图形界面轻松管理 Docker 容器，无需深入复杂的命令行操作。</p><p>无论是初学者还是经验丰富的开发者，DPanel 都能帮助他们更高效地管理和部署容器。</p><h2 id=\"DPanel-的优势\"><a href=\"#DPanel-的优势\" class=\"headerlink\" title=\"DPanel 的优势\"></a>DPanel 的优势</h2><p>DPanel 的界面简洁直观，操作简单易懂，即使新手也能轻松上手。</p><p>DPanel 提供了丰富功能，涵盖了网站管理的各个方面，能够满足各种用户的需求。</p><p>基于容器设计，安装和部署都非常简单。用户无需复杂配置，只需通过简单步骤即可快速启动面板。其简洁直观操作界面让用户能够轻松上手，即使是第一次接触 Docker 的用户也能快速掌握基本操作。</p><p>DPanel 与 Docker 官方的兼容性非常好，能够无缝对接 Docker 的各项功能。支持多种操作系统和 Docker 版本，确保用户在不同环境下都能稳定使用。</p><h2 id=\"服务安装\"><a href=\"#服务安装\" class=\"headerlink\" title=\"服务安装\"></a>服务安装</h2><p>我们可以使用官方提供的集成脚本安装 DPanel。当宿主机没有 Docker 环境时，集成脚本会尝试安装 Docker 环境：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://dpanel.cc/quick.sh -o quick.sh &amp;&amp; sudo bash quick.sh</span><br></pre></td></tr></table></figure><p>按照提示操作。安装完成后通过浏览器访问面板地址，即可进入管理界面：</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[DPanel Install Log]: 选择你需要安装的版本 </span><br><span class=\"line\">1. 标准版 (需要绑定 80 及 443 端口)</span><br><span class=\"line\">2. Lite版 (不包含域名转发相关功能)</span><br><span class=\"line\">3. 标准版 (Pro)</span><br><span class=\"line\">4. Lite版 (Pro)</span><br><span class=\"line\">5. Beta版 (内测版本)</span><br><span class=\"line\">输入你要安装的版本编号 [默认: 2]: 1</span><br><span class=\"line\">1. Docker Hub</span><br><span class=\"line\">2. ALiYun</span><br><span class=\"line\">选择镜像源 [默认: 1]: 2</span><br><span class=\"line\">[DPanel Install Log]: 你安装使用的镜像为 registry.cn-hangzhou.aliyuncs.com/dpanel/dpanel:latest </span><br><span class=\"line\">[DPanel Install Log]: 设置 DPanel 容器名称，更新面板时请配置为当前面板容器名称 </span><br><span class=\"line\">请输入名称 [默认: dpanel]: </span><br><span class=\"line\">[DPanel Install Log]: 你指定的容器名称为 dpanel </span><br><span class=\"line\">设置 DPanel 容器挂载目录 [默认: /home/dpanel]: </span><br><span class=\"line\">[DPanel Install Log]: 您选择的面板容器挂载目录是 /home/dpanel </span><br><span class=\"line\">设置 DPanel 端口 [默认: 25128]: </span><br><span class=\"line\">[DPanel Install Log]: 您设置的端口是:  25128 </span><br><span class=\"line\">[DPanel Install Log]: 如果端口已经被占用，请再次执行脚本更换端口后重新安装 </span><br><span class=\"line\">Unable to find image &#x27;registry.cn-hangzhou.aliyuncs.com/dpanel/dpanel:latest&#x27; locally</span><br><span class=\"line\">latest: Pulling from dpanel/dpanel</span><br><span class=\"line\">1f3e46996e29: Pull complete </span><br><span class=\"line\">b6dde5f749cd: Pull complete </span><br><span class=\"line\">459b8d93d51a: Pull complete </span><br><span class=\"line\">7d52a0c67d85: Pull complete </span><br><span class=\"line\">4b97f8a613e7: Pull complete </span><br><span class=\"line\">1d46bacd0854: Pull complete </span><br><span class=\"line\">3eac9a9b4fcb: Pull complete </span><br><span class=\"line\">2c5c0b90bb2b: Pull complete </span><br><span class=\"line\">4f4fb700ef54: Pull complete </span><br><span class=\"line\">Digest: sha256:9daa4f411b2bd7845cfd71e747ba2827797ea5fe9e754b8db475541c3700ba01</span><br><span class=\"line\">Status: Downloaded newer image for registry.cn-hangzhou.aliyuncs.com/dpanel/dpanel:latest</span><br><span class=\"line\">d492b83d8c546297836a8735d73f0b3f8943f134065dea4ef5ffff834f028715</span><br><span class=\"line\">[DPanel Install Log]:  </span><br><span class=\"line\">[DPanel Install Log]: =================感谢您的耐心等待，安装、升级已完成================== </span><br><span class=\"line\">[DPanel Install Log]:  </span><br><span class=\"line\">[DPanel Install Log]: 请使用您的浏览器访问面板，并初始化管理员帐号:  </span><br><span class=\"line\">[DPanel Install Log]: 外部地址:  http://123.116.127.26:25128 </span><br><span class=\"line\">[DPanel Install Log]: 内部地址:  http://192.168.31.187:25128 </span><br><span class=\"line\">[DPanel Install Log]: 如果您使用的是云服务器，请在安全组中打开端口 25128 </span><br><span class=\"line\">[DPanel Install Log]:  </span><br><span class=\"line\">[DPanel Install Log]: 官方网站及文档: https://dpanel.cc </span><br><span class=\"line\">[DPanel Install Log]: 代码仓库: https://github.com/donknap/dpanel </span><br><span class=\"line\">[DPanel Install Log]:  </span><br><span class=\"line\">[DPanel Install Log]: ================================================================ </span><br></pre></td></tr></table></figure><h2 id=\"面板效果\"><a href=\"#面板效果\" class=\"headerlink\" title=\"面板效果\"></a>面板效果</h2><p>首页概览：</p><p><img src=\"https://cdn.dusays.com/2025/02/799-1.jpg\"></p><p>容器管理：</p><p><img src=\"https://cdn.dusays.com/2025/02/799-2.jpg\"></p><p>文件管理：</p><p><img src=\"https://cdn.dusays.com/2025/02/799-3.jpg\"></p><p>镜像管理：</p><p><img src=\"https://cdn.dusays.com/2025/02/799-4.jpg\"></p><p>创建镜像：</p><p><img src=\"https://cdn.dusays.com/2025/02/799-5.jpg\"></p><p>系统管理：</p><p><img src=\"https://cdn.dusays.com/2025/02/799-6.jpg\"></p>"
  },
  {
    "title": "Hexo配置SWPP实现PWA",
    "author": "LiuShen's Blog",
    "date": "2025-03-28T06:53:00.000Z",
    "link": "https://blog.liushen.fun/posts/4355f2b3/",
    "content": "前几天，我调整了网站样式，但受浏览器缓存机制影响，更新后无法立即生效，需要手动刷新。为优化体验，我向空梦大佬请教了SWPP配置，最终实现了自动更新样式，并成功部署了PWA，在此分享给大家。"
  },
  {
    "title": "本博出现图碎问题说明",
    "author": "杜老师说",
    "date": "2025-03-25T16:00:00.000Z",
    "link": "https://dusays.com/798/",
    "content": "<blockquote><p>近期本博访问时出现了图碎问题，经排查系 CDN 回源失败导致的。有小伙伴可能会说，保证成功就可以修复了，其实没有那么简单。本文简单描述下存储节点数据流，顺便科普一下如何清理单站数据缓存。</p></blockquote><span id=\"more\"></span><h2 id=\"数据流向\"><a href=\"#数据流向\" class=\"headerlink\" title=\"数据流向\"></a>数据流向</h2><p>通过下图可以看出，图片文件保存在主机上，通过转换处理为 WebP 格式文件，经由 CDN 回源并实现访问加速：</p><p><img src=\"https://cdn.dusays.com/2025/02/798-1.jpg\"></p><h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>登录 CDN 管理后台查看其日志，发现出现超时记录。</p><p>超时原因一般两种，一种是因线路问题导致回源超时，一种是因主机没有及时返回数据造成。</p><p>本地图片经由 WebP 中间件处理，再回源给 CDN 做反代，经查是 WebP 服务突然宕机导致 CDN 未收到响应数据导致超时。</p><p>除超时问题外，因无返回数据导致 CDN 响应 404，而服务器设置 404 默认跳转至主站首页，这就导致好多小伙伴频繁刷新页面依然不显示图片。</p><h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>目前已关闭 CDN，流量直接回源至源主机，缺点就是会影响访问的速度。带调试维护后会重新挂上 CDN。</p><p>WebP 图片转换是为了减少图片体积，进而减轻带宽压力「轻量级服务器有流量的限制」因此不能暂停使用，已修改其参数，尽量保障响应的成功率。</p><p>如之前有访问记录，会留下 404 跳转缓存，需要清理相关数据。</p><p>有小伙伴分享了两种清理缓存的方法，需要的小伙伴可以参考操作。</p><h2 id=\"清理缓存\"><a href=\"#清理缓存\" class=\"headerlink\" title=\"清理缓存\"></a>清理缓存</h2><p>首先进入到浏览器的开发者工具，一般浏览器点击<kbd>F12</kbd>即可，进入更多设置，勾选 Disable cache while DevTools is open 项：</p><p><img src=\"https://cdn.dusays.com/2025/02/798-2.jpg\"></p><p>或者切换到网络标签页，勾选禁用缓存，刷新页面即可「注意保持开发者工具一直处于开启的状态」</p><p><img src=\"https://cdn.dusays.com/2025/02/798-3.jpg\"></p>"
  },
  {
    "title": "Cloudflare/Vercel项目推荐(4)",
    "author": "LiuShen's Blog",
    "date": "2025-03-20T13:52:00.000Z",
    "link": "https://blog.liushen.fun/posts/43f0ef13/",
    "content": "很久没有推荐项目啦，之前的三次项目分享反馈都很好，涵盖了很多领域的项目，大家也很喜欢那些项目，近期我又收集了一些，数量达到了，那就再来分享一些吧！项目很难找的QAQ!"
  },
  {
    "title": "新版本去不图床免费公测开始啦",
    "author": "杜老师说",
    "date": "2025-03-19T16:00:00.000Z",
    "link": "https://dusays.com/797/",
    "content": "<blockquote><p>有不少的小伙伴为去不图床提供建议，包括但不限于增加支持格式、图片处理、水印功能等等。杜老师也收集了这些建议转交给程序的设计者，经过了几个月更新迭代，V2 版本已推出。由于使用了新框架，无论是操作逻辑和功能支持，都有较大改变，所以在正式上线前，杜老师决定免费公测下！</p></blockquote><span id=\"more\"></span><h2 id=\"新版界面\"><a href=\"#新版界面\" class=\"headerlink\" title=\"新版界面\"></a>新版界面</h2><p>新版主页相较老版而言更加简洁，仅包含站点名称及描述信息，还有图片托管数据。最下方是两个功能入口，一个是图片上传的窗口，一个是用户登录的界面：</p><p><img src=\"https://cdn.dusays.com/2025/02/797-1.jpg\"></p><p>在上传界面中，可以选择从本地计算机上传图片文件，也可接入到摄影头，拍摄照片后再上传。目前支持访客上传，所有图片会经过审核后存放在服务器：</p><p><img src=\"https://cdn.dusays.com/2025/02/797-2.jpg\"></p><p>用户可以通过邮箱、用户名两种方式来登录。目前程序强制要求注册用户进行邮件验证，不能关闭验证。但因 bug 收不到验证信息，所以杜老师提供了一些体验账号用需要的小伙伴们使用：</p><p><img src=\"https://cdn.dusays.com/2025/02/797-3.jpg\"></p><p>在用户的仪表盘中可看到当前拥有的存储容量，可以查看图片、相册、分享，可以购买订阅、查看订单，提交工单或申请 API Tokens：</p><p><img src=\"https://cdn.dusays.com/2025/02/797-4.jpg\"></p><h2 id=\"体验账号\"><a href=\"#体验账号\" class=\"headerlink\" title=\"体验账号\"></a>体验账号</h2><p>体验账号密码统一为 <code>7bu.top</code>，默认容量为 1G。如选择了账号，请在评论区中留下编号，杜老师会根据使用备注信息，避免有小伙伴重复选择账号：</p><table><thead><tr><th>编号</th><th>账号</th><th>邮箱</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>dusays1</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#97;&#121;&#x73;&#49;&#64;&#100;&#x75;&#115;&#97;&#121;&#115;&#46;&#x63;&#x6f;&#109;\">dusays1@dusays.com</a></td><td>已用</td></tr><tr><td>2</td><td>dusays2</td><td><a href=\"mailto:&#100;&#117;&#115;&#97;&#121;&#x73;&#x32;&#64;&#100;&#117;&#x73;&#x61;&#x79;&#x73;&#x2e;&#99;&#x6f;&#x6d;\">dusays2@dusays.com</a></td><td>暂无</td></tr><tr><td>3</td><td>dusays3</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#x61;&#121;&#115;&#51;&#64;&#100;&#x75;&#115;&#97;&#121;&#115;&#x2e;&#99;&#111;&#x6d;\">dusays3@dusays.com</a></td><td>暂无</td></tr><tr><td>4</td><td>dusays4</td><td><a href=\"mailto:&#100;&#x75;&#x73;&#x61;&#x79;&#x73;&#x34;&#64;&#100;&#x75;&#x73;&#97;&#121;&#115;&#46;&#x63;&#111;&#109;\">dusays4@dusays.com</a></td><td>暂无</td></tr><tr><td>5</td><td>dusays5</td><td><a href=\"mailto:&#100;&#117;&#115;&#97;&#x79;&#x73;&#53;&#x40;&#100;&#x75;&#x73;&#97;&#121;&#115;&#x2e;&#x63;&#x6f;&#x6d;\">dusays5@dusays.com</a></td><td>暂无</td></tr><tr><td>6</td><td>dusays6</td><td><a href=\"mailto:&#x64;&#117;&#x73;&#x61;&#121;&#115;&#54;&#64;&#x64;&#117;&#x73;&#x61;&#x79;&#x73;&#x2e;&#99;&#x6f;&#109;\">dusays6@dusays.com</a></td><td>暂无</td></tr><tr><td>7</td><td>dusays7</td><td><a href=\"mailto:&#x64;&#x75;&#115;&#x61;&#x79;&#115;&#55;&#64;&#x64;&#x75;&#x73;&#97;&#121;&#x73;&#x2e;&#99;&#111;&#109;\">dusays7@dusays.com</a></td><td>暂无</td></tr><tr><td>8</td><td>dusays8</td><td><a href=\"mailto:&#100;&#117;&#x73;&#97;&#x79;&#x73;&#x38;&#x40;&#100;&#x75;&#115;&#x61;&#121;&#115;&#x2e;&#x63;&#111;&#x6d;\">dusays8@dusays.com</a></td><td>暂无</td></tr><tr><td>9</td><td>dusays9</td><td><a href=\"mailto:&#100;&#117;&#115;&#97;&#x79;&#x73;&#57;&#x40;&#100;&#x75;&#x73;&#x61;&#121;&#x73;&#46;&#99;&#111;&#109;\">dusays9@dusays.com</a></td><td>暂无</td></tr><tr><td>10</td><td>dusays10</td><td><a href=\"mailto:&#x64;&#117;&#115;&#x61;&#121;&#x73;&#49;&#48;&#64;&#x64;&#x75;&#x73;&#x61;&#121;&#115;&#x2e;&#x63;&#111;&#109;\">dusays10@dusays.com</a></td><td>暂无</td></tr><tr><td>11</td><td>dusays11</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#x61;&#x79;&#x73;&#x31;&#49;&#x40;&#x64;&#x75;&#115;&#x61;&#x79;&#x73;&#46;&#x63;&#x6f;&#109;\">dusays11@dusays.com</a></td><td>暂无</td></tr><tr><td>12</td><td>dusays12</td><td><a href=\"mailto:&#x64;&#117;&#115;&#x61;&#121;&#115;&#49;&#x32;&#x40;&#100;&#x75;&#x73;&#x61;&#x79;&#x73;&#46;&#x63;&#x6f;&#x6d;\">dusays12@dusays.com</a></td><td>暂无</td></tr><tr><td>13</td><td>dusays13</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#x61;&#x79;&#x73;&#49;&#51;&#64;&#100;&#117;&#x73;&#97;&#121;&#x73;&#46;&#x63;&#111;&#109;\">dusays13@dusays.com</a></td><td>暂无</td></tr><tr><td>14</td><td>dusays14</td><td><a href=\"mailto:&#x64;&#117;&#x73;&#97;&#x79;&#115;&#x31;&#x34;&#64;&#100;&#x75;&#x73;&#x61;&#121;&#x73;&#46;&#99;&#x6f;&#109;\">dusays14@dusays.com</a></td><td>暂无</td></tr><tr><td>15</td><td>dusays15</td><td><a href=\"mailto:&#x64;&#x75;&#115;&#x61;&#x79;&#115;&#x31;&#x35;&#64;&#100;&#117;&#x73;&#97;&#x79;&#115;&#46;&#99;&#x6f;&#109;\">dusays15@dusays.com</a></td><td>暂无</td></tr><tr><td>16</td><td>dusays16</td><td><a href=\"mailto:&#100;&#117;&#x73;&#97;&#121;&#115;&#49;&#x36;&#64;&#x64;&#x75;&#115;&#97;&#x79;&#x73;&#46;&#x63;&#x6f;&#109;\">dusays16@dusays.com</a></td><td>暂无</td></tr><tr><td>17</td><td>dusays17</td><td><a href=\"mailto:&#100;&#117;&#x73;&#x61;&#x79;&#x73;&#49;&#x37;&#x40;&#100;&#117;&#115;&#x61;&#x79;&#x73;&#x2e;&#x63;&#111;&#109;\">dusays17@dusays.com</a></td><td>暂无</td></tr><tr><td>18</td><td>dusays18</td><td><a href=\"mailto:&#100;&#117;&#x73;&#97;&#121;&#x73;&#x31;&#56;&#x40;&#100;&#117;&#x73;&#x61;&#121;&#x73;&#46;&#x63;&#x6f;&#109;\">dusays18@dusays.com</a></td><td>暂无</td></tr><tr><td>19</td><td>dusays19</td><td><a href=\"mailto:&#100;&#117;&#x73;&#x61;&#121;&#115;&#x31;&#57;&#64;&#x64;&#117;&#x73;&#97;&#121;&#x73;&#x2e;&#99;&#x6f;&#x6d;\">dusays19@dusays.com</a></td><td>暂无</td></tr><tr><td>20</td><td>dusays20</td><td><a href=\"mailto:&#x64;&#117;&#x73;&#x61;&#x79;&#x73;&#50;&#48;&#64;&#100;&#117;&#115;&#97;&#x79;&#115;&#46;&#99;&#111;&#x6d;\">dusays20@dusays.com</a></td><td>暂无</td></tr><tr><td>21</td><td>dusays21</td><td><a href=\"mailto:&#x64;&#117;&#x73;&#x61;&#121;&#115;&#50;&#x31;&#64;&#x64;&#117;&#115;&#x61;&#x79;&#115;&#x2e;&#x63;&#111;&#109;\">dusays21@dusays.com</a></td><td>暂无</td></tr><tr><td>22</td><td>dusays22</td><td><a href=\"mailto:&#x64;&#x75;&#115;&#x61;&#121;&#115;&#50;&#50;&#x40;&#x64;&#x75;&#115;&#x61;&#121;&#x73;&#x2e;&#99;&#x6f;&#109;\">dusays22@dusays.com</a></td><td>暂无</td></tr><tr><td>23</td><td>dusays23</td><td><a href=\"mailto:&#100;&#x75;&#115;&#x61;&#x79;&#115;&#x32;&#51;&#x40;&#x64;&#117;&#x73;&#97;&#x79;&#x73;&#x2e;&#99;&#111;&#109;\">dusays23@dusays.com</a></td><td>暂无</td></tr><tr><td>24</td><td>dusays24</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#97;&#121;&#115;&#x32;&#52;&#64;&#100;&#117;&#115;&#x61;&#x79;&#115;&#x2e;&#x63;&#x6f;&#109;\">dusays24@dusays.com</a></td><td>暂无</td></tr><tr><td>25</td><td>dusays25</td><td><a href=\"mailto:&#x64;&#117;&#115;&#x61;&#x79;&#115;&#x32;&#x35;&#x40;&#100;&#x75;&#115;&#x61;&#x79;&#x73;&#x2e;&#99;&#x6f;&#x6d;\">dusays25@dusays.com</a></td><td>暂无</td></tr><tr><td>26</td><td>dusays26</td><td><a href=\"mailto:&#100;&#x75;&#115;&#x61;&#x79;&#x73;&#x32;&#x36;&#x40;&#100;&#x75;&#x73;&#x61;&#x79;&#115;&#x2e;&#x63;&#111;&#x6d;\">dusays26@dusays.com</a></td><td>已用</td></tr><tr><td>27</td><td>dusays27</td><td><a href=\"mailto:&#100;&#117;&#115;&#x61;&#121;&#x73;&#x32;&#55;&#64;&#100;&#x75;&#x73;&#97;&#x79;&#115;&#x2e;&#x63;&#x6f;&#109;\">dusays27@dusays.com</a></td><td>暂无</td></tr><tr><td>28</td><td>dusays28</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#97;&#x79;&#115;&#x32;&#56;&#x40;&#x64;&#117;&#x73;&#97;&#121;&#x73;&#46;&#x63;&#x6f;&#109;\">dusays28@dusays.com</a></td><td>暂无</td></tr><tr><td>29</td><td>dusays29</td><td><a href=\"mailto:&#x64;&#x75;&#115;&#x61;&#121;&#x73;&#x32;&#x39;&#64;&#100;&#x75;&#115;&#97;&#121;&#115;&#46;&#x63;&#x6f;&#109;\">dusays29@dusays.com</a></td><td>暂无</td></tr><tr><td>30</td><td>dusays30</td><td><a href=\"mailto:&#100;&#x75;&#x73;&#97;&#x79;&#x73;&#51;&#x30;&#64;&#100;&#117;&#x73;&#x61;&#121;&#x73;&#x2e;&#x63;&#x6f;&#109;\">dusays30@dusays.com</a></td><td>暂无</td></tr><tr><td>31</td><td>dusays31</td><td><a href=\"mailto:&#100;&#117;&#115;&#97;&#x79;&#x73;&#51;&#49;&#x40;&#x64;&#x75;&#115;&#97;&#x79;&#115;&#x2e;&#99;&#111;&#109;\">dusays31@dusays.com</a></td><td>暂无</td></tr><tr><td>32</td><td>dusays32</td><td><a href=\"mailto:&#x64;&#117;&#115;&#x61;&#x79;&#115;&#x33;&#50;&#x40;&#x64;&#117;&#115;&#x61;&#121;&#115;&#46;&#99;&#111;&#109;\">dusays32@dusays.com</a></td><td>暂无</td></tr><tr><td>33</td><td>dusays33</td><td><a href=\"mailto:&#100;&#117;&#115;&#97;&#121;&#x73;&#x33;&#51;&#x40;&#x64;&#x75;&#115;&#x61;&#x79;&#x73;&#46;&#x63;&#x6f;&#x6d;\">dusays33@dusays.com</a></td><td>暂无</td></tr><tr><td>34</td><td>dusays34</td><td><a href=\"mailto:&#100;&#x75;&#115;&#97;&#121;&#x73;&#51;&#52;&#64;&#x64;&#x75;&#x73;&#x61;&#121;&#x73;&#x2e;&#x63;&#111;&#x6d;\">dusays34@dusays.com</a></td><td>暂无</td></tr><tr><td>35</td><td>dusays35</td><td><a href=\"mailto:&#100;&#117;&#115;&#x61;&#121;&#115;&#51;&#x35;&#x40;&#x64;&#117;&#115;&#97;&#x79;&#x73;&#46;&#99;&#x6f;&#109;\">dusays35@dusays.com</a></td><td>暂无</td></tr><tr><td>36</td><td>dusays36</td><td><a href=\"mailto:&#100;&#117;&#115;&#x61;&#121;&#x73;&#x33;&#54;&#x40;&#100;&#117;&#x73;&#x61;&#121;&#115;&#x2e;&#99;&#111;&#x6d;\">dusays36@dusays.com</a></td><td>暂无</td></tr><tr><td>37</td><td>dusays37</td><td><a href=\"mailto:&#100;&#117;&#115;&#x61;&#121;&#115;&#51;&#x37;&#64;&#100;&#117;&#x73;&#97;&#121;&#115;&#46;&#99;&#x6f;&#x6d;\">dusays37@dusays.com</a></td><td>暂无</td></tr><tr><td>38</td><td>dusays38</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#97;&#x79;&#x73;&#51;&#x38;&#64;&#x64;&#x75;&#115;&#x61;&#121;&#115;&#x2e;&#99;&#x6f;&#109;\">dusays38@dusays.com</a></td><td>暂无</td></tr><tr><td>39</td><td>dusays39</td><td><a href=\"mailto:&#100;&#x75;&#115;&#x61;&#x79;&#115;&#x33;&#57;&#64;&#x64;&#117;&#115;&#x61;&#121;&#115;&#x2e;&#99;&#111;&#x6d;\">dusays39@dusays.com</a></td><td>暂无</td></tr><tr><td>40</td><td>dusays40</td><td><a href=\"mailto:&#x64;&#117;&#x73;&#97;&#x79;&#x73;&#x34;&#48;&#64;&#100;&#x75;&#x73;&#97;&#121;&#x73;&#46;&#x63;&#111;&#109;\">dusays40@dusays.com</a></td><td>暂无</td></tr><tr><td>41</td><td>dusays41</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#97;&#121;&#x73;&#x34;&#49;&#x40;&#100;&#117;&#x73;&#97;&#121;&#115;&#x2e;&#x63;&#111;&#109;\">dusays41@dusays.com</a></td><td>暂无</td></tr><tr><td>42</td><td>dusays42</td><td><a href=\"mailto:&#100;&#117;&#115;&#x61;&#121;&#115;&#52;&#50;&#64;&#100;&#117;&#x73;&#97;&#x79;&#x73;&#x2e;&#99;&#x6f;&#109;\">dusays42@dusays.com</a></td><td>暂无</td></tr><tr><td>43</td><td>dusays43</td><td><a href=\"mailto:&#100;&#117;&#x73;&#97;&#x79;&#115;&#52;&#x33;&#x40;&#100;&#117;&#115;&#97;&#x79;&#115;&#46;&#x63;&#111;&#109;\">dusays43@dusays.com</a></td><td>暂无</td></tr><tr><td>44</td><td>dusays44</td><td><a href=\"mailto:&#100;&#117;&#115;&#x61;&#x79;&#115;&#52;&#x34;&#x40;&#x64;&#x75;&#x73;&#97;&#x79;&#115;&#46;&#99;&#x6f;&#x6d;\">dusays44@dusays.com</a></td><td>暂无</td></tr><tr><td>45</td><td>dusays45</td><td><a href=\"mailto:&#x64;&#117;&#x73;&#97;&#x79;&#115;&#x34;&#53;&#64;&#100;&#117;&#115;&#x61;&#x79;&#115;&#46;&#x63;&#x6f;&#109;\">dusays45@dusays.com</a></td><td>暂无</td></tr><tr><td>46</td><td>dusays46</td><td><a href=\"mailto:&#100;&#x75;&#x73;&#x61;&#x79;&#115;&#x34;&#x36;&#64;&#x64;&#x75;&#x73;&#x61;&#x79;&#x73;&#46;&#99;&#111;&#x6d;\">dusays46@dusays.com</a></td><td>暂无</td></tr><tr><td>47</td><td>dusays47</td><td><a href=\"mailto:&#100;&#x75;&#115;&#x61;&#x79;&#115;&#x34;&#55;&#64;&#x64;&#x75;&#x73;&#x61;&#x79;&#x73;&#46;&#x63;&#x6f;&#x6d;\">dusays47@dusays.com</a></td><td>暂无</td></tr><tr><td>48</td><td>dusays48</td><td><a href=\"mailto:&#100;&#117;&#115;&#97;&#x79;&#115;&#52;&#x38;&#x40;&#100;&#x75;&#x73;&#97;&#121;&#x73;&#x2e;&#x63;&#111;&#109;\">dusays48@dusays.com</a></td><td>暂无</td></tr><tr><td>49</td><td>dusays49</td><td><a href=\"mailto:&#100;&#x75;&#115;&#x61;&#121;&#115;&#x34;&#57;&#x40;&#100;&#117;&#115;&#x61;&#x79;&#x73;&#x2e;&#x63;&#111;&#109;\">dusays49@dusays.com</a></td><td>暂无</td></tr><tr><td>50</td><td>dusays50</td><td><a href=\"mailto:&#x64;&#117;&#x73;&#x61;&#121;&#x73;&#x35;&#x30;&#x40;&#100;&#117;&#x73;&#x61;&#121;&#115;&#x2e;&#x63;&#111;&#x6d;\">dusays50@dusays.com</a></td><td>暂无</td></tr><tr><td>51</td><td>dusays51</td><td><a href=\"mailto:&#100;&#x75;&#x73;&#97;&#121;&#x73;&#x35;&#49;&#x40;&#100;&#117;&#115;&#x61;&#121;&#115;&#46;&#99;&#111;&#x6d;\">dusays51@dusays.com</a></td><td>暂无</td></tr><tr><td>52</td><td>dusays52</td><td><a href=\"mailto:&#100;&#117;&#115;&#x61;&#121;&#x73;&#x35;&#x32;&#64;&#100;&#x75;&#115;&#x61;&#x79;&#x73;&#46;&#x63;&#111;&#109;\">dusays52@dusays.com</a></td><td>暂无</td></tr><tr><td>53</td><td>dusays53</td><td><a href=\"mailto:&#x64;&#x75;&#115;&#97;&#121;&#x73;&#53;&#x33;&#x40;&#100;&#x75;&#115;&#x61;&#x79;&#115;&#x2e;&#99;&#x6f;&#x6d;\">dusays53@dusays.com</a></td><td>暂无</td></tr><tr><td>54</td><td>dusays54</td><td><a href=\"mailto:&#100;&#117;&#115;&#97;&#121;&#x73;&#53;&#x34;&#x40;&#100;&#x75;&#x73;&#x61;&#121;&#115;&#46;&#x63;&#111;&#x6d;\">dusays54@dusays.com</a></td><td>暂无</td></tr><tr><td>55</td><td>dusays55</td><td><a href=\"mailto:&#x64;&#x75;&#115;&#x61;&#x79;&#115;&#53;&#53;&#64;&#x64;&#x75;&#x73;&#97;&#x79;&#x73;&#46;&#x63;&#x6f;&#109;\">dusays55@dusays.com</a></td><td>暂无</td></tr><tr><td>56</td><td>dusays56</td><td><a href=\"mailto:&#100;&#x75;&#x73;&#x61;&#121;&#x73;&#x35;&#x36;&#64;&#100;&#117;&#x73;&#x61;&#121;&#115;&#x2e;&#x63;&#111;&#x6d;\">dusays56@dusays.com</a></td><td>暂无</td></tr><tr><td>57</td><td>dusays57</td><td><a href=\"mailto:&#x64;&#117;&#115;&#x61;&#121;&#115;&#x35;&#55;&#64;&#x64;&#x75;&#115;&#x61;&#x79;&#x73;&#x2e;&#x63;&#111;&#x6d;\">dusays57@dusays.com</a></td><td>暂无</td></tr><tr><td>58</td><td>dusays58</td><td><a href=\"mailto:&#x64;&#x75;&#115;&#x61;&#121;&#x73;&#53;&#x38;&#x40;&#100;&#x75;&#x73;&#x61;&#x79;&#x73;&#x2e;&#x63;&#x6f;&#109;\">dusays58@dusays.com</a></td><td>暂无</td></tr><tr><td>59</td><td>dusays59</td><td><a href=\"mailto:&#100;&#117;&#x73;&#x61;&#121;&#x73;&#53;&#x39;&#64;&#x64;&#117;&#115;&#97;&#x79;&#115;&#46;&#x63;&#x6f;&#109;\">dusays59@dusays.com</a></td><td>暂无</td></tr><tr><td>60</td><td>dusays60</td><td><a href=\"mailto:&#x64;&#x75;&#115;&#x61;&#121;&#115;&#x36;&#48;&#64;&#x64;&#117;&#x73;&#x61;&#121;&#115;&#x2e;&#99;&#x6f;&#x6d;\">dusays60@dusays.com</a></td><td>暂无</td></tr><tr><td>61</td><td>dusays61</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#97;&#121;&#115;&#54;&#x31;&#x40;&#x64;&#117;&#115;&#97;&#x79;&#x73;&#x2e;&#x63;&#x6f;&#x6d;\">dusays61@dusays.com</a></td><td>暂无</td></tr><tr><td>62</td><td>dusays62</td><td><a href=\"mailto:&#100;&#117;&#x73;&#97;&#121;&#x73;&#54;&#50;&#x40;&#100;&#x75;&#x73;&#x61;&#x79;&#x73;&#46;&#x63;&#111;&#x6d;\">dusays62@dusays.com</a></td><td>暂无</td></tr><tr><td>63</td><td>dusays63</td><td><a href=\"mailto:&#100;&#x75;&#x73;&#x61;&#121;&#x73;&#x36;&#x33;&#x40;&#100;&#x75;&#x73;&#97;&#121;&#x73;&#x2e;&#x63;&#x6f;&#x6d;\">dusays63@dusays.com</a></td><td>暂无</td></tr><tr><td>64</td><td>dusays64</td><td><a href=\"mailto:&#x64;&#117;&#x73;&#x61;&#x79;&#x73;&#54;&#52;&#64;&#x64;&#x75;&#x73;&#97;&#x79;&#x73;&#46;&#x63;&#111;&#x6d;\">dusays64@dusays.com</a></td><td>暂无</td></tr><tr><td>65</td><td>dusays65</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#97;&#121;&#115;&#x36;&#53;&#x40;&#100;&#x75;&#x73;&#97;&#121;&#115;&#x2e;&#x63;&#111;&#x6d;\">dusays65@dusays.com</a></td><td>暂无</td></tr><tr><td>66</td><td>dusays66</td><td><a href=\"mailto:&#x64;&#117;&#115;&#97;&#121;&#115;&#x36;&#54;&#x40;&#100;&#x75;&#115;&#97;&#x79;&#115;&#x2e;&#99;&#111;&#109;\">dusays66@dusays.com</a></td><td>已用</td></tr><tr><td>67</td><td>dusays67</td><td><a href=\"mailto:&#100;&#x75;&#x73;&#x61;&#121;&#115;&#x36;&#x37;&#64;&#100;&#x75;&#x73;&#97;&#x79;&#x73;&#46;&#99;&#111;&#109;\">dusays67@dusays.com</a></td><td>暂无</td></tr><tr><td>68</td><td>dusays68</td><td><a href=\"mailto:&#100;&#117;&#x73;&#x61;&#121;&#x73;&#54;&#56;&#64;&#x64;&#117;&#x73;&#97;&#x79;&#x73;&#x2e;&#x63;&#x6f;&#109;\">dusays68@dusays.com</a></td><td>暂无</td></tr><tr><td>69</td><td>dusays69</td><td><a href=\"mailto:&#100;&#117;&#115;&#97;&#x79;&#115;&#x36;&#57;&#64;&#x64;&#117;&#x73;&#x61;&#121;&#x73;&#x2e;&#x63;&#111;&#x6d;\">dusays69@dusays.com</a></td><td>暂无</td></tr><tr><td>70</td><td>dusays70</td><td><a href=\"mailto:&#100;&#117;&#x73;&#x61;&#121;&#x73;&#x37;&#x30;&#64;&#100;&#x75;&#x73;&#x61;&#x79;&#115;&#46;&#99;&#x6f;&#x6d;\">dusays70@dusays.com</a></td><td>暂无</td></tr><tr><td>71</td><td>dusays71</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#x61;&#121;&#x73;&#55;&#49;&#x40;&#100;&#117;&#115;&#97;&#x79;&#x73;&#46;&#99;&#111;&#109;\">dusays71@dusays.com</a></td><td>暂无</td></tr><tr><td>72</td><td>dusays72</td><td><a href=\"mailto:&#x64;&#x75;&#115;&#x61;&#121;&#x73;&#55;&#50;&#x40;&#x64;&#117;&#x73;&#97;&#121;&#x73;&#x2e;&#x63;&#x6f;&#109;\">dusays72@dusays.com</a></td><td>暂无</td></tr><tr><td>73</td><td>dusays73</td><td><a href=\"mailto:&#100;&#x75;&#x73;&#x61;&#121;&#115;&#x37;&#x33;&#x40;&#x64;&#x75;&#x73;&#97;&#x79;&#115;&#x2e;&#x63;&#x6f;&#109;\">dusays73@dusays.com</a></td><td>暂无</td></tr><tr><td>74</td><td>dusays74</td><td><a href=\"mailto:&#x64;&#x75;&#115;&#97;&#121;&#x73;&#x37;&#x34;&#64;&#x64;&#x75;&#x73;&#97;&#121;&#x73;&#46;&#x63;&#x6f;&#109;\">dusays74@dusays.com</a></td><td>暂无</td></tr><tr><td>75</td><td>dusays75</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#x61;&#121;&#x73;&#55;&#x35;&#64;&#x64;&#117;&#x73;&#x61;&#x79;&#x73;&#x2e;&#x63;&#111;&#109;\">dusays75@dusays.com</a></td><td>暂无</td></tr><tr><td>76</td><td>dusays76</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#x61;&#x79;&#x73;&#x37;&#54;&#x40;&#x64;&#117;&#115;&#x61;&#x79;&#x73;&#46;&#99;&#x6f;&#109;\">dusays76@dusays.com</a></td><td>暂无</td></tr><tr><td>77</td><td>dusays77</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#x61;&#x79;&#x73;&#x37;&#55;&#64;&#x64;&#117;&#115;&#x61;&#x79;&#x73;&#46;&#99;&#x6f;&#x6d;\">dusays77@dusays.com</a></td><td>暂无</td></tr><tr><td>78</td><td>dusays78</td><td><a href=\"mailto:&#x64;&#x75;&#115;&#97;&#121;&#x73;&#55;&#56;&#64;&#x64;&#x75;&#115;&#x61;&#x79;&#115;&#46;&#x63;&#111;&#109;\">dusays78@dusays.com</a></td><td>暂无</td></tr><tr><td>79</td><td>dusays79</td><td><a href=\"mailto:&#x64;&#117;&#115;&#x61;&#x79;&#x73;&#55;&#x39;&#x40;&#100;&#x75;&#x73;&#x61;&#x79;&#115;&#46;&#99;&#111;&#109;\">dusays79@dusays.com</a></td><td>暂无</td></tr><tr><td>80</td><td>dusays80</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#x61;&#x79;&#115;&#56;&#x30;&#x40;&#x64;&#117;&#115;&#97;&#121;&#x73;&#46;&#x63;&#x6f;&#x6d;\">dusays80@dusays.com</a></td><td>暂无</td></tr><tr><td>81</td><td>dusays81</td><td><a href=\"mailto:&#x64;&#117;&#x73;&#x61;&#x79;&#115;&#x38;&#49;&#64;&#100;&#117;&#115;&#97;&#121;&#115;&#46;&#x63;&#x6f;&#x6d;\">dusays81@dusays.com</a></td><td>暂无</td></tr><tr><td>82</td><td>dusays82</td><td><a href=\"mailto:&#100;&#117;&#115;&#x61;&#121;&#115;&#x38;&#50;&#x40;&#x64;&#x75;&#x73;&#x61;&#x79;&#x73;&#46;&#99;&#111;&#x6d;\">dusays82@dusays.com</a></td><td>暂无</td></tr><tr><td>83</td><td>dusays83</td><td><a href=\"mailto:&#100;&#x75;&#115;&#97;&#x79;&#x73;&#56;&#x33;&#x40;&#x64;&#117;&#x73;&#97;&#x79;&#115;&#46;&#99;&#111;&#109;\">dusays83@dusays.com</a></td><td>暂无</td></tr><tr><td>84</td><td>dusays84</td><td><a href=\"mailto:&#100;&#x75;&#115;&#x61;&#x79;&#115;&#x38;&#52;&#64;&#100;&#117;&#115;&#97;&#121;&#x73;&#46;&#x63;&#111;&#x6d;\">dusays84@dusays.com</a></td><td>暂无</td></tr><tr><td>85</td><td>dusays85</td><td><a href=\"mailto:&#100;&#x75;&#115;&#x61;&#x79;&#115;&#x38;&#53;&#64;&#100;&#117;&#x73;&#97;&#x79;&#115;&#46;&#99;&#x6f;&#109;\">dusays85@dusays.com</a></td><td>暂无</td></tr><tr><td>86</td><td>dusays86</td><td><a href=\"mailto:&#x64;&#117;&#x73;&#x61;&#x79;&#115;&#x38;&#54;&#64;&#x64;&#x75;&#x73;&#x61;&#x79;&#115;&#46;&#x63;&#111;&#x6d;\">dusays86@dusays.com</a></td><td>暂无</td></tr><tr><td>87</td><td>dusays87</td><td><a href=\"mailto:&#100;&#117;&#115;&#97;&#x79;&#115;&#56;&#x37;&#x40;&#100;&#117;&#x73;&#x61;&#121;&#115;&#x2e;&#x63;&#111;&#109;\">dusays87@dusays.com</a></td><td>暂无</td></tr><tr><td>88</td><td>dusays88</td><td><a href=\"mailto:&#100;&#x75;&#x73;&#x61;&#x79;&#x73;&#56;&#x38;&#x40;&#x64;&#x75;&#x73;&#97;&#x79;&#115;&#46;&#x63;&#x6f;&#x6d;\">dusays88@dusays.com</a></td><td>已用</td></tr><tr><td>89</td><td>dusays89</td><td><a href=\"mailto:&#x64;&#117;&#115;&#x61;&#x79;&#x73;&#x38;&#57;&#x40;&#x64;&#117;&#x73;&#x61;&#121;&#115;&#x2e;&#99;&#x6f;&#109;\">dusays89@dusays.com</a></td><td>暂无</td></tr><tr><td>90</td><td>dusays90</td><td><a href=\"mailto:&#100;&#117;&#x73;&#x61;&#x79;&#115;&#x39;&#48;&#x40;&#x64;&#117;&#x73;&#97;&#121;&#115;&#x2e;&#x63;&#111;&#x6d;\">dusays90@dusays.com</a></td><td>暂无</td></tr><tr><td>91</td><td>dusays91</td><td><a href=\"mailto:&#x64;&#117;&#115;&#x61;&#121;&#x73;&#x39;&#x31;&#x40;&#x64;&#x75;&#x73;&#x61;&#x79;&#x73;&#x2e;&#x63;&#x6f;&#x6d;\">dusays91@dusays.com</a></td><td>暂无</td></tr><tr><td>92</td><td>dusays92</td><td><a href=\"mailto:&#x64;&#117;&#115;&#97;&#121;&#x73;&#x39;&#50;&#x40;&#x64;&#x75;&#115;&#97;&#121;&#x73;&#x2e;&#x63;&#x6f;&#x6d;\">dusays92@dusays.com</a></td><td>暂无</td></tr><tr><td>93</td><td>dusays93</td><td><a href=\"mailto:&#x64;&#117;&#115;&#x61;&#121;&#115;&#57;&#51;&#x40;&#100;&#117;&#x73;&#97;&#x79;&#115;&#x2e;&#99;&#111;&#x6d;\">dusays93@dusays.com</a></td><td>暂无</td></tr><tr><td>94</td><td>dusays94</td><td><a href=\"mailto:&#x64;&#117;&#115;&#97;&#121;&#115;&#57;&#52;&#64;&#x64;&#x75;&#x73;&#x61;&#121;&#x73;&#46;&#99;&#x6f;&#x6d;\">dusays94@dusays.com</a></td><td>暂无</td></tr><tr><td>95</td><td>dusays95</td><td><a href=\"mailto:&#x64;&#117;&#115;&#97;&#121;&#115;&#57;&#53;&#64;&#100;&#117;&#x73;&#x61;&#x79;&#x73;&#46;&#x63;&#x6f;&#109;\">dusays95@dusays.com</a></td><td>已用</td></tr><tr><td>96</td><td>dusays96</td><td><a href=\"mailto:&#x64;&#x75;&#115;&#97;&#x79;&#115;&#57;&#x36;&#x40;&#x64;&#117;&#x73;&#97;&#x79;&#x73;&#46;&#x63;&#111;&#x6d;\">dusays96@dusays.com</a></td><td>已用</td></tr><tr><td>97</td><td>dusays97</td><td><a href=\"mailto:&#100;&#x75;&#x73;&#x61;&#121;&#x73;&#x39;&#x37;&#x40;&#100;&#117;&#115;&#x61;&#x79;&#115;&#x2e;&#x63;&#111;&#x6d;\">dusays97@dusays.com</a></td><td>暂无</td></tr><tr><td>98</td><td>dusays98</td><td><a href=\"mailto:&#100;&#x75;&#115;&#97;&#x79;&#x73;&#x39;&#56;&#64;&#x64;&#117;&#x73;&#x61;&#x79;&#x73;&#46;&#99;&#111;&#x6d;\">dusays98@dusays.com</a></td><td>暂无</td></tr><tr><td>99</td><td>dusays99</td><td><a href=\"mailto:&#100;&#117;&#115;&#x61;&#121;&#115;&#x39;&#57;&#x40;&#x64;&#x75;&#115;&#97;&#x79;&#115;&#x2e;&#x63;&#111;&#x6d;\">dusays99@dusays.com</a></td><td>已用</td></tr><tr><td>100</td><td>dusays100</td><td><a href=\"mailto:&#x64;&#x75;&#x73;&#x61;&#x79;&#x73;&#x31;&#48;&#x30;&#x40;&#x64;&#117;&#115;&#97;&#x79;&#115;&#46;&#99;&#111;&#109;\">dusays100@dusays.com</a></td><td>已用</td></tr></tbody></table><h2 id=\"站点地址\"><a href=\"#站点地址\" class=\"headerlink\" title=\"站点地址\"></a>站点地址</h2><p>公测站点地址如下，点击访问即可。因为公测站点是单线路，与图片外链同线路，所以访问速度较慢，请访问慢的小伙伴耐心等待页面加载：</p><div class=\"tag-plugin link dis-select\"><a class=\"link-card plain\" title=\"\" href=\"https://test.7bu.top/\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\" cardlink autofill=\"title,icon\"><div class=\"left\"><span class=\"title\">https://test.7bu.top/</span><span class=\"cap link footnote\">https://test.7bu.top/</span></div><div class=\"right\"><div class=\"lazy img\" data-bg=\"https://jsd.onmicrosoft.cn/gh/cdn-x/placeholder@1.0.12/link/8f277b4ee0ecd.svg\"></div></div></a></div><h2 id=\"公测规则\"><a href=\"#公测规则\" class=\"headerlink\" title=\"公测规则\"></a>公测规则</h2><ol><li><p>本站仅供测试使用，请勿用于非法用途；</p></li><li><p>原去不图床的账号无法在测试平台中使用，请使用提供的体验账号；</p></li><li><p>如选择好体验账号，请将编号留言至评论区，杜老师会备注信息，方便其它的小伙伴选择；</p></li><li><p>公测平台预计运营至三月底，届时所有数据将被释放，请勿保存重要数据；</p></li><li><p>在使用的过程中如发现有任何 bug，欢迎在评论区留言，杜老师会第一时间提交给程序开发者，尽量完善新版图床程序；</p></li><li><p>最终解释权归杜老师说所有。</p></li></ol>"
  },
  {
    "title": "Certimate--自动化申请并部署证书到所有平台",
    "author": "LiuShen's Blog",
    "date": "2025-03-07T07:45:00.000Z",
    "link": "https://blog.liushen.fun/posts/3a813929/",
    "content": "自从众多免费证书有效期减少到了三个月，换证书就成为了一件麻烦的事情。近期，Certimate工具更新了3.0版本，这个版本非常的强大，不仅可以部署常规的CDN，还可以部署雷池，宝塔等平台，满足了我的所有需求，所以推荐给没有使用过的朋友试试！"
  },
  {
    "title": "静态网站优化方案",
    "author": "LiuShen's Blog",
    "date": "2025-02-27T02:11:00.000Z",
    "link": "https://blog.liushen.fun/posts/260f4f9a/",
    "content": "最近加了不少好友的友链，认识了许多网站上的朋友。由于众所周知的原因，有些国外服务在国内访问较慢，部分朋友的站点因此影响了国内用户的访问体验。为了帮助大家提高访问速度，我写了这篇文章，简单介绍了一些我所了解的网站加速方案，希望能够帮助更多朋友改善速度问题。"
  },
  {
    "title": "从Memos转移到Moments",
    "author": "LiuShen's Blog",
    "date": "2025-02-18T13:14:00.000Z",
    "link": "https://blog.liushen.fun/posts/8338183a/",
    "content": "由于Memos作者频繁的更新API，一直想替换掉它，最终找到了替代程序Moments。虽然功能不如Memos丰富，但对于我这种把Memos当做说说使用的用户，Moments的功能更加实用。更重要的是，它的API简单易懂，数据更为实用，作者也非常听取用户反馈，积极改善产品。"
  },
  {
    "title": "windows本地部署DeepSeek-R1模型",
    "author": "LiuShen's Blog",
    "date": "2025-02-08T16:01:00.000Z",
    "link": "https://blog.liushen.fun/posts/f9a31276/",
    "content": "最近，DeepSeek因为遭受攻击事件登上热搜，作为一个计算机爱好者，我也非常感兴趣，于是研究了一下如何在本地部署模型，希望通过这篇文章与大家探讨并学习这一过程中的小技巧和感想。"
  },
  {
    "title": "2024再见，2025你好！",
    "author": "LiuShen's Blog",
    "date": "2025-02-01T16:31:00.000Z",
    "link": "https://blog.liushen.fun/posts/a0ab9e68/",
    "content": "回家啦回家啦！01月22号早上起床突然看到了一堆的未接电话，父母突然打过来说爷爷身体抱恙，让我提前回去帮忙，于是我连忙收拾东西洗澡洗脸刷牙，十二点，踏上了回老家的旅程。"
  },
  {
    "title": "Cloudflare/Vercel项目推荐(3)",
    "author": "LiuShen's Blog",
    "date": "2025-01-13T16:31:00.000Z",
    "link": "https://blog.liushen.fun/posts/cb179d4/",
    "content": "前面发布了关于 Cloudflare 和 Vercel 项目推荐的文章，收到了不少好评，许多小伙伴因此找到了实用的工具。因此，我决定将这一系列内容长期更新。考虑到 Cloudflare 和 Vercel 等 Serverless 平台有许多通用之处，这次将二者的推荐内容合并在一起，希望对大家有所帮助！"
  },
  {
    "title": "2024，清风入梦，扬帆待明年",
    "author": "LiuShen's Blog",
    "date": "2024-12-31T08:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/c7e32459/",
    "content": "2024年悄然而过，这一年充满挑战与收获。从考研备战到学业突破，从志愿服务的温暖瞬间到技术开发的点滴进步，每一步都写满努力与成长。回望这一年，忙碌而充实，期待在新的一年继续扬帆前行。"
  },
  {
    "title": "华为通用软件开发工程师面经",
    "author": "LiuShen's Blog",
    "date": "2024-12-25T08:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/24538266/",
    "content": "十二月初，有幸和华为签了约，然而当时一直在备战考研，无论去不去，我也走了这么远，就此放弃甚是不甘，于是我打算登到山顶，看看那边更高的山。"
  },
  {
    "title": "智云加速--JSDelivr国内公益加速镜像",
    "author": "LiuShen's Blog",
    "date": "2024-10-27T16:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/cd89007e/",
    "content": "最近初七云的合作者，也是朋友Jason，组建了一个Jsdelivr镜像站，经过测试，国内速度非常不错，并且也没有什么非常大的限制，带宽也比较充足，于是在这里推荐给大家，希望可以帮助大家提升网站速度！"
  },
  {
    "title": "Chsrc--全功能一键换源工具",
    "author": "LiuShen's Blog",
    "date": "2024-09-30T16:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/b330686/",
    "content": "详细介绍了chsrc工具的安装和使用，提供了简单的命令帮助开发者快速切换不同语言的源，提升开发效率。无论是熟练用户还是新手，chsrc都能让换源变得简单高效，解决了换源过程中的一些困扰。"
  },
  {
    "title": "迄今所有人生都大写着失败，但不妨碍我继续向前",
    "author": "LiuShen's Blog",
    "date": "2024-09-18T00:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/95c77d9e/",
    "content": "中秋夜，失败再次降临，心情如月光般冷清。回望过去，我总与成功擦肩，内心充满不甘与恐惧。尽管如此，我不会停下，唯有继续前行，才能找到属于自己的那一束光。"
  },
  {
    "title": "OpenGist--自部署代码片段保存项目",
    "author": "LiuShen's Blog",
    "date": "2024-09-04T16:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/1ab3d6a1/",
    "content": "最近一直在找一个快捷分享文本片段并保存的项目，曾使用cf worker搭建了pastbin，使用vercel搭建了轻笑的文本粘贴分享项目，为了速度，我又自行搭建了FileCodeBox项目，但由于各种原因，我都不是很满意，于是继续寻找，最终找到了opengist，基本满足了我的要求。"
  },
  {
    "title": "太白山&法门寺三日游游记",
    "author": "LiuShen's Blog",
    "date": "2024-08-26T16:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/62e27d26/",
    "content": "转瞬之间，暑假即将过去，我父母决定带我出去玩，经过一番选择，我们选择了太白山国家森林公园，以及其周围的法门寺，经过三天的游玩，我们了解到了很多新知识，也锻炼了身体，放松了身心。"
  }
]