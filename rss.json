[
  {
    "title": "Linux 系统监控利器 ctop 命令详解",
    "author": "杜老师说",
    "date": "2025-07-11T16:00:00.000Z",
    "link": "https://dusays.com/816/",
    "content": "在 Linux 系统，尤其是当我们在管理多个容器时，了解系统和容器的资源使用情况至关重要。今天，就给大家介绍一款强大的监控工具 ctop，本文详细介绍 ctop 的安装、使用、命令选项。ctop 命令的简介ctop 是一个类似 top 命令的界面工具，它专注于容器环境，能够实时监控 Docker&#x2F;Podman 等容器运行时的性能指标，如 CPU、内存、网络、磁盘 I&#x2F;O 等使用情况。它以一种直观的方式展示各个容器的详细信息，让管理员可以迅速掌握系统整体健康状况，并且快速定位到可能存在性能瓶颈的容器。与传统 top 命令相比，ctop 提供更丰富的容器相关数据和更便捷的交互方式。它不仅能展示容器的基本资源使用率，还能深入到每个容器的进程级别，查看内部运行具体进程，这对于深入分析容器性能表现非常有帮助。ctop 命令的安装Linux 系统的安装方法「以 Ubuntu 为例」12sudo wget https://github.com/bcicen/ctop/releases/download/v0.7.7/ctop-0.7.7-linux-amd64 -O /usr/local/bin/ctopsudo chmod +x /usr/local/bin/ctop注意：可以直接从 Github 下载最新版本的二进制文件进行安装，以上是具体的步骤「这里以 v0.7.7 版本为例」最后，用命令 ctop -v 验证是否安装成功，若可以正确显示版本号，说明安装成功。通过 Docker 的方法安装1docker run --rm -it --name=ctop -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop:latest注意：也可以使用 Docker 快速启动 ctop 容器来进行监控。ctop 命令的使用基本使用在终端中输入 ctop 命令后回车，即可启动 ctop 程序进入主界面。在界面中，会显示出所有正在运行的容器及其资源使用情况的概览，包括容器名称、CPU 使用率、内存使用量及限制、网络收发速率、磁盘读写速率、进程数等信息。可以通过方向键上下移动光标来选择不同容器，然后按下回车键可以查看到所选容器详细信息，如容器的创建时间、各资源的详细使用数据以及内部运行的进程列表等。命令选项命令选项列表如下：选项描述ctop -a只查看正在运行中容器，方便专注那些实际处于活动状态、可能对系统资源产生影响的容器。ctop -f string查看包含指定字符串的容器，当系统中有大量容器时，利用此选项可快速过滤出我们关心的特定容器进行监控。ctop -i反转默认颜色，如默认的颜色显示效果不佳，或需要与其它界面风格保持一致，可使用该选项来改变界面的颜色显示。ctop -r反向容器排列顺序，默认情况下存活的容器在前，使用此选项可将其顺序反转，以便按照不同顺序查看容器。ctop -s string按照指定字段排序，如执行 ctop -s net 可以按照网络使用率对容器进行排序，从而快速找到网络流量较高容器。交互操作交互操作列表如下：操作描述h打开帮助，在使用过程中如果忘记了某些快捷键的功能或者想了解更多操作方法，可以随时按下 h 键查看帮助信息。s打开排序，通过此快捷键可以方便地切换不同的排序字段，无需重新输入命令选项。q退出打开的对话框，当查看完帮助信息或排序设置后，按下 q 键可以退出相应的对话框，返回到主界面。a只显示正在运行的容器，与 ctop -a 命令效果一致，但在已经启动了 ctop 程序的情况下，使用快捷键可更快速地切换显示模式。r反转排序，正在运行容器放在末尾，方便在不同的排序需求之间快速切换。f输入指定字符串过滤出想要查看容器，与 ctop -f string 命令类似，无需重新输入命令，直接在当前界面中进行过滤操作。j用于向下移动光标，方便在容器列表中快速定位到不同的容器。k用于向上移动光标，方便在容器列表中快速定位到不同的容器。Enter查看指定容器详细指标，当光标定位到某个容器，按下回车键即可进入该容器详细信息界面，查看更全面的资源使用以及进程信息。"
  },
  {
    "title": "企业微信实用操作指南",
    "author": "LiuShen's Blog",
    "date": "2025-07-10T17:09:00.000Z",
    "link": "https://blog.liushen.fun/posts/c00eee1d/",
    "content": "刚开始用企业微信时，总觉得它是多余的累赘，占空间又麻烦。但用了一段时间后，意外发现它其实很好用，甚至在某些方面比普通微信更强。这篇文章就简单聊聊，正确开启企业微信的方式吧！"
  },
  {
    "title": "Linux 下的高效压缩工具 Zstandard",
    "author": "杜老师说",
    "date": "2025-07-05T16:00:00.000Z",
    "link": "https://dusays.com/815/",
    "content": "Zstandard 以其卓越的性能和丰富的功能，成为了 Linux 下一款不可或缺的压缩工具。无论是对单个文件还是整个目录的压缩和解压，它都可以轻松应对，且在处理速度和压缩效果上都有着出色的表现。Zstandard 的简介Zstandard 是由 Facebook 开发并开源的一种快速无损压缩算法，2015 年首次发布以来，凭借其高压缩比和快速的解压缩速度，逐渐受到了开发者青睐。它不仅在压缩效率上超越传统的 gzip 等工具，还能在保持高压缩率的同时，实现极快解压速度，特别适合对数据处理效率要求较高的场景，如大数据处理、日志压缩、网络数据传输等等。Zstandard 的特点高压缩比：通常情况下 Zstandard 能够获得比 gzip 更好压缩效果，有效减少数据存储空间。快速解压：其解压缩速度极快，即使是低压缩等级，解压速度也能远超一些 SSD 的读取速度，大大提高了数据的读取效率。多线程的支持：Zstandard 自带多线程压缩功能，可以充分利用多核 CPU 的性能，大幅提升压缩速度。例如，在处理大量数据时，多线程压缩能够显著的缩短压缩时间，提高工作效率。丰富压缩级别选择：提供了从 1 到 22 的压缩级别选择，用户可根据实际需求在压缩速度和压缩率之间进行灵活权衡。压缩级别越高，压缩比率越大，但压缩速度会相应减慢；反之，压缩级别越低，压缩速度越快，但压缩比率会有所降低。字典压缩模式：Zstandard 为小数据提供一种特殊的字典压缩模式。用户可通过提供一些样本数据来训练生成字典，然后在压缩和解压时加载该字典，从而在小数据上实现更高压缩率，这对于处理大量小文件场景非常有用。使用模式：Zstandard 提供了多种命令模式，包括压缩、解压、查看压缩信息、测试压缩文件等等。Zstandard 的安装Debian&#x2F;Ubuntu 系统的安装命令如下：1sudo apt install zstdFedora&#x2F;Red Hat&#x2F;CentOS&#x2F;AlmaLinux 系统的安装命令如下：1sudo dnf install zstdArch Linux&#x2F;Manjaro 系统的安装命令如下：1sudo pacman -S zstd也可以从源码编译安装「这里以 1.5.7 版本为例」命令如下：12345wget https://github.com/facebook/zstd/releases/download/v1.5.7/zstd-1.5.7.tar.gztar -zxvf zstd-1.5.7.tar.gzcd zstd-1.5.7/makesudo make installZstandard 的使用压缩文件基础压缩：使用命令 zstd file_name 即可对文件进行压缩，压缩后会生成一个扩展名为.zst 的文件，如 zstd doc.txt，会生成 doc.txt.zst 文件。指定压缩级别：可通过选项来指定压缩级别，例如 zstd -3 file_name 表示使用压缩级别-3 进行压缩。解压文件基础解压：使用 zstd -d archive_name.zst 即可对文件进行解压，解压后的文件会自动去除.zst 后缀。指定解压后文件名：同样可使用-o 选项来指定解压后的文件名，如 zstd -d archive_name.zst -o new_file_name。压缩目录压缩整个目录：可以使用 zstd -rz directory_name 来压缩整个目录，其中-r 表示递归压缩目录中所有文件和子目录，-z 表示压缩的操作。解压目录：对于压缩后的目录文件，使用 zstd -dr archive_name.zst 进行解压缩，-d 表示解压缩操作，-r 表示递归解压缩。查看压缩文件内容使用 zstd -l archive_name.zst 可以查看压缩文件的相关信息，如压缩比、压缩级别、文件大小等等。而 zstd -t archive_name.zst 则可用于测试压缩文件的完整性，确保文件在压缩和传输过程中未损坏。"
  },
  {
    "title": "浅谈AIGC论文检测",
    "author": "LiuShen's Blog",
    "date": "2025-07-01T11:32:00.000Z",
    "link": "https://blog.liushen.fun/posts/58e1bd57/",
    "content": "六月初的我刚提交论文，如今六月将尽，才有心情回顾那段被AIGC检测折磨的经历。当前主流的AIGC检测工具普遍存在逻辑简单、误判率高的问题，只要语句稍显严谨、条理清晰，便容易被认定为AI生成。本文将就此简单谈谈个人感受与看法。"
  },
  {
    "title": "使用 Python 脚本下载指定网页的图片文件",
    "author": "杜老师说",
    "date": "2025-06-29T16:00:00.000Z",
    "link": "https://dusays.com/814/",
    "content": "有小伙伴反馈说侧边栏随机图出现了重复，有些审美疲劳，要求杜老师再更新一些图片，正好聊天广场有小伙伴分享了一个美图的网址。本文分享如何使用 Python 脚本下载指定网页的图片文件，需要的小伙伴可以参考文中代码。代码需求使用 Python 的语言编写一个脚本，下载指定网址中包含的多种格式图片文件，如 JPG 和 PNG 格式图片。将图片保存至指定的目录中，可以指定绝对路径，或者相对路径。并用随机数重命名，防止同名图片触发覆盖事件。尽可能使用 Python 的标准库，尽量避免使用第三方库。变更解释导入必要的库：包括 os&#x2F;requests&#x2F;re 以及 random；定义函数：download_images 函数可用于下载图片；获取图片链接：使用正则表达式从网页内容中提取图片 URL；下载保存图片：使用 requests 库下载图片，并且使用 random 库生成随机数作为文件名；指定目录：确保保存目录存在，如果不存在则创建；获取内容：使用 requests 库获取网页内容。功能代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import osimport requestsimport reimport randomdef download_images(url, save_folder): # 确保保存目录存在 if not os.path.exists(save_folder): os.makedirs(save_folder) # 发送HTTP请求获取网页内容 response = requests.get(url) if response.status_code != 200: print(f\"Failed to retrieve the webpage. Status code: &#123;response.status_code&#125;\") return # 使用正则表达式查找所有的图片URL image_urls = re.findall(r&#x27;<img[^>]+src=[\"\\&#x27;](.*?)[\"\\&#x27;]&#x27;, response.text) for img_url in image_urls: # 处理相对路径的URL if not img_url.startswith((&#x27;http://&#x27;, &#x27;https://&#x27;)): img_url = os.path.join(url, img_url) # 下载图片 img_response = requests.get(img_url) if img_response.status_code == 200: # 生成随机文件名 random_filename = f\"&#123;random.randint(10000, 99999)&#125;.jpg\" save_path = os.path.join(save_folder, random_filename) # 保存图片 with open(save_path, &#x27;wb&#x27;) as f: f.write(img_response.content) print(f\"Downloaded and saved &#123;img_url&#125; as &#123;save_path&#125;\") else: print(f\"Failed to download &#123;img_url&#125;. Status code: &#123;img_response.status_code&#125;\")# 读取网址列表文件def read_urls_from_file(file_path): with open(file_path, &#x27;r&#x27;) as file: urls = file.readlines() return [url.strip() for url in urls]# 示例调用if __name__ == \"__main__\": urls_file = &#x27;f:\\\\代码\\\\urls.txt&#x27; # 包含网址的文件路径 save_folder = &#x27;f:\\\\代码\\\\images&#x27; # 保存图片的目录路径 urls = read_urls_from_file(urls_file) for url in urls: download_images(url, save_folder)注意：本示例代码仅适用于 Python 3.x 版本，运行于 Windows 系统。如使用 Linux 系统，可能需要进行相应修改。使用说明将上述的代码保存为 download_images.py 文件。在运行脚本时，传入目标网页的 URL 和保存图片的目录路径。脚本会自动下载网页中所有图片，并且以随机数命名保存到指定目录中。打开的网址保存在一个文件，每行一个网址。"
  },
  {
    "title": "X Window 与 Wayland 的深度对比",
    "author": "杜老师说",
    "date": "2025-06-23T16:00:00.000Z",
    "link": "https://dusays.com/813/",
    "content": "X Window 与 Wayland 不仅代表了图形界面技术不同发展阶段，更体现了设计理念、架构模式及应用场景的显著差异。本文将从历史背景、技术特点、应用场景及未来展望等多个维度，对 X Window 和 Wayland 进行深入剖析。历史背景演变X11 诞生于 1984 年，由麻省理工学院 MIT 开发，旨在满足分布式计算环境下图形界面需求。其设计哲学强调网络透明性，允许用户在远程服务器运行应用程序，并在本地终端显示结果，极大地拓展 GUI 的可用性和灵活性。随着时间推移，X11 凭借其广泛的硬件和软件支持，逐渐成为 Linux 桌面环境的标准图形界面后端。随着计算需求增长，X11 的一些设计局限逐渐显现，例如架构复杂、性能瓶颈和安全性问题。2008 年，Kristian 提出 Wayland 项目，旨在创建一个更加现代、高效窗口系统。Wayland 的设计重点在于简化架构、提高性能和增强安全性，采用客户端 Compositor 通信模型，减少了中间层，提升了效率和响应速度。技术特点比较X11 采用 C&#x2F;S 模型，客户端通过 X 协议与服务器通信，而 X 服务器负责处理所有图形和输入事件。相比之下，Wayland 采用了客户端 Compositor 模型，客户端可直接与 Compositor 通信，Compositor 负责了窗口管理、合成、输出。Wayland 的架构更加贴合现代图形硬件特性，可以更高效地利用 GPU 和现代显示技术。X11 在安全性方面存在了固有弱点，其复杂协议和广泛权限易被恶意利用。Wayland 通过限制客户端权限以及简化通信模型，显著提高了安全性。例如，Wayland 禁止了应用程序直接访问底层硬件，只允许了它们与 Compositor 通信，从而增强系统的安全性。Wayland 的协议设计更加高效，减少了延迟和带宽消耗。在移动设备和资源受限的环境中，Wayland 的优势尤为明显。此外，Wayland 避免了不必要的复杂性和额外处理，使得其在性能上优于 X11。尤其是在窗口大小调整以及拖动等操作中，Wayland 显得更加的平滑流畅。X11 拥有庞大的生态系统，支持大量的应用程序和工具，几乎所有 Linux 发行版默认都使用 X11。然而，Wayland 的生态系统正在快速发展，主要桌面环境如 GNOME 和 KDE 已全面支持 Wayland。尽管如此，一些特定应用程序和工具可能仍需要额外的兼容层或补丁才能在 Wayland 下运行。应用场景在桌面环境中，X11 凭借其广泛的兼容性和成熟度，仍然是许多用户的首选。但随着硬件技术的进步和用户对高性能图形渲染的需求增加，Wayland 正在逐渐成为主流的选择。越来越多的 Linux 发行版开始默认支持 Wayland，例如 Fedora 和 Ubuntu 等。在移动设备和嵌入式系统中，资源受限是一个普遍的问题。Wayland 的低功耗以及高性能特性使其成为这些场景下的理想选择。例如，Android 系统中的 SurfaceFlinger 就是基于 Wayland 的原理设计，用于图形显示以及窗口管理。在虚拟化和云计算的环境中，图形性能以及网络传输效率至关重要。虽然 X11 的网络透明性在某些场景下仍有些优势，但 Wayland 通过优化的协议和架构，正在成为虚拟桌面基础设施 VDI 和云桌面解决方案的首选，特别在需要高性能图形渲染的场景中。未来展望随着 GPU 技术的成熟以及高性能计算需求的增长，图形界面的渲染以及交互将变得更加复杂和多样化。X11 和 Wayland 都在积极的探索与 Direct Rendering Manager、Mesa 等图形驱动框架的更紧密集成，以实现更高效的图形渲染和硬件加速。此外，Wayland 还在研究如何更好地支持多显示器配置、高分辨率显示、触控输入，以满足未来计算环境多样化需求。最后说两句题外话，近一个月杜老师因为工作的原因，拖更了很多篇文章，感谢小伙伴们的关注和催更，近期会大批量发表一些技术文章，欢迎大家关注。"
  },
  {
    "title": "腾讯EdgeOne免费国内CDN",
    "author": "LiuShen's Blog",
    "date": "2025-06-21T05:12:00.000Z",
    "link": "https://blog.liushen.fun/posts/68b52a49/",
    "content": "最近各类公益CDN层出不穷，个人站长迎来新机遇。阿里、腾讯相继推出免费CDN套餐，门槛低、易上手。机缘巧合我拿到腾讯海外站EdgeOne的免费套餐兑换码，立刻上手体，整体表现非常流畅，配置简单，速度也令人满意。这篇也将简要说明一下我的使用感受。"
  },
  {
    "title": "OpenResty 的性能优化配置建议",
    "author": "杜老师说",
    "date": "2025-06-17T16:00:00.000Z",
    "link": "https://dusays.com/812/",
    "content": "1Panel 的用户越来越多，内置 Web 服务 OpenResty 使用占比也在增加，但网上对其优化的教程很少。应关关童靴的需求，更新一篇有关 OpenResty 的一些优化建议。可优化设置项较少，需要的小伙伴可以根据实际需求变更配置。server_names_hash_bucket_size 参数项含义：该参数用于设置服务器名字 hash 表大小，若名字过长或服务较多，保持默认值可能使 hash 表空间不足，引发错误。优化建议：一般为 server_names_hash_max_size 的 1&#x2F;2-1&#x2F;3 左右，如服务器配置较高，可直接设置 256。gzip 参数项gzip_min_length 参数项：对小文件压缩可能得不偿失，一般设置为 1k 或 10k 左右，小于该值的文件不压缩。gzip_comp_level 参数项：压缩级别，1 为最小最快，9 为最大最慢，通常建议设置为 4-6，以平衡压缩效果和 CPU 使用率。client_header_buffer_size 参数项含义：用于设置读取客户端请求头的缓冲区大小，若请求头过大，可能超出默认值导致客户端报错。优化建议：根据实际业务需求调整，如业务请求头通常较大，可设为 32k 左右，确保可以完整读取大部分请求头。client_max_body_size 参数项含义：限制客户端请求主体的最大允许大小，超出该值请求将被拒绝。优化建议：根据业务场景和服务器承受能力设置，如普通表单提交可设置为 10m-20m 左右，对于文件上传等大请求可以适当增大。keepalive_timeout 参数项含义：设置长连接的超时时间，即客户端与服务器间连接保持空闲的最大时间。优化建议：一般设为 60-90 秒左右，时间过短会频繁断开连接且增加开销，过长则可能占用过多的资源。优化后的配置示例123456789101112131415161718192021222324252627http &#123; # gzip相关配置 gzip on; gzip_min_length 1k; gzip_comp_level 6; gzip_buffers 4 16k; gzip_http_version 1.1; gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php application/json; gzip_vary on; gzip_proxied any; gzip_disable \"msie6\"; # 服务器名字hash表大小 server_names_hash_bucket_size 128; # 客户端请求头缓冲区大小 client_header_buffer_size 32k; large_client_header_buffers 4 32k; # 客户端请求主体最大允许大小 client_max_body_size 32m; # 长连接超时时间 keepalive_timeout 60; # 其他配置...&#125;注意：以上配置仅供参考，具体优化需根据实际业务场景和硬件配置进行调优。"
  },
  {
    "title": "Cloudflare/Vercel项目推荐(5)",
    "author": "LiuShen's Blog",
    "date": "2025-06-12T13:12:00.000Z",
    "link": "https://blog.liushen.fun/posts/5aebde52/",
    "content": "项目荒啦！终于凑够了一批项目，前面四期深受大家喜爱，获得了不少评论和浏览量，那就更新一篇文章吧！本次更新主要围绕着cloudflare和Vercel展开，基本上都可以零成本部署，欢迎尝试部署！当然我也会提供预览地址，如果用处较大会一直维护，欢迎访问呀！"
  },
  {
    "title": "Nginx 从配置到缓存的性能优化",
    "author": "杜老师说",
    "date": "2025-06-11T16:00:00.000Z",
    "link": "https://dusays.com/811/",
    "content": "Nginx 是一个高性能的 HTTP 服务器和反向代理服务器，广泛应用于处理高并发请求。然而，默认配置并不一定适合所有场景，尤其是在高流量或复杂业务逻辑的情况下。本文将介绍一些 Nginx 的基础配置优化和缓存的使用方法以提升 Nginx 的性能。基础配置优化调整 worker_processes 以及 worker_connectionsNginx 使用多进程模型处理请求。worker_processes 定义 Nginx 使用的工作进程数，而 worker_connections 定义每个工作进程可以处理的最大连接数：1234worker_processes auto;events &#123; worker_connections 1024;&#125;参数作用如下：参数作用worker_processes设置为 auto 可以让 Nginx 自动根据 CPU 核心数来分配工作进程数。如服务器有 4 个 CPU 核心，Nginx 会启动 4 个工作进程。worker_connections这个值决定了每个工作进程可以处理的最大连接数。通常，可根据服务器的内存和网络带宽来调整这个值。1024 是一个常见起点，可以调整到 2048。启用 keepalive 长连接HTTP 协议中的 keepalive 机制允许客户端和服务器在同一个连接上发送多个请求，减少了 TCP 连接的建立和关闭开销：1234http &#123; keepalive_timeout 65; keepalive_requests 100;&#125;参数作用如下：参数作用keepalive_timeout定义客户端与服务器保持连接的时间。设置为 65 秒意味着如果客户端在 65 秒内没有发送新请求，连接将被关闭。keepalive_requests定义了单个连接上允许的最大请求数。设置为 100 意味着一个连接可以处理 100 个请求后关闭。调整 buffer 的大小Nginx 使用缓冲区来存储请求和响应数据。如缓冲区设置过小，Nginx 可能会频繁地进行磁盘 I&#x2F;O 操作，影响性能：12345http &#123; client_body_buffer_size 10K; client_header_buffer_size 1k; large_client_header_buffers 48k;&#125;参数作用如下：参数作用client_body_buffer_size定义用于存储客户端请求体的缓冲区大小。如请求体超过这个大小，会将数据写入磁盘。client_header_buffer_size定义用于存储客户端请求头的缓冲区大小。large_client_header_buffers定义用于存储大型请求头的缓冲区数量和大小。缓存提升性能启动静态资源缓存对于静态资源，启用缓存可以显著减少服务器的负载：1234location ~* \\.(jpg|jpeg|png|gif|ico|css|js)$ &#123; expires 30d; add_header Cache-Control \"public, no-transform\";&#125;参数作用如下：参数作用expires定义了资源的缓存时间。30d 表示资源将缓存 30 天。Cache-Controlpublic 表示资源可以被任何缓存「如浏览器、CDN等」缓存，no-transform 表示不允许代理服务器对资源进行转换「如压缩等」使用代理缓存如使用 Nginx 作为反向代理，可启用代理缓存来缓存后端服务器的响应：12345678910proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;server &#123; location / &#123; proxy_cache my_cache; proxy_pass http://backend; proxy_cache_valid 200 302 10m; proxy_cache_valid 404 1m; &#125;&#125;参数作用如下：参数作用proxy_cache_path定义了缓存存储的路径、缓存键的存储区域、缓存的最大大小及缓存的有效期。proxy_cache启用缓存并使用指定的缓存区域。proxy_cache_valid定义不同状态码的缓存时间。使用 gzip 压缩减少网络传输量gzip 压缩可以显著减少传输数据量，从而加快页面加载速度：12345678http &#123; gzip on; gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; gzip_comp_level 6; gzip_min_length 256; gzip_proxied any; gzip_vary on;&#125;参数作用如下：参数作用gzip启用压缩。gzip_types定义了需要压缩的文件类型。通常包括文本文件、CSS&#x2F;JavaScript&#x2F;XML 等。gzip_comp_level定义压缩级别，范围是 1 到 9。1 是最低的压缩率，9 是最高的压缩率。默认值 6。gzip_min_length定义最小压缩文件大小。小于这个大小的文件不会被压缩。gzip_proxied定义了是否对代理请求启用压缩。any 表示对所有代理请求启用压缩。gzip_vary添加响应，确保代理服务器能正确处理缓存。HTTP&#x2F;2 与速率限制使用 HTTP&#x2F;2 版协议HTTP&#x2F;2 提供了多路复用、头部压缩特性，可以显著提升性能：12345server &#123; listen 443 ssl http2; ssl_certificate /path/to/cert.pem; ssl_certificate_key /path/to/key.pem;&#125;参数作用如下：参数作用http2在 listen 指令中添加 http2 参数即可启用。限制请求速率为了防止恶意请求或突发流量导致服务器过载，可使用 limit_req 模块限制请求速率：123456789http &#123; limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s; server &#123; location / &#123; limit_req zone=one burst=5; &#125; &#125;&#125;参数作用如下：参数作用limit_req_zone定义限流区域。$binary_remote_addr 表示根据客户端的 IP 地址进行限流，rate=1r/s 表每秒允许 1 个请求。limit_req在指定的位置应用限流。burst=5 表允许突发 5 个请求。LB 和日志优化负载均衡12345678910upstream backend &#123; server 192.168.1.1:8080; server 192.168.1.2:8080;&#125;server &#123; location / &#123; proxy_pass http://backend; &#125;&#125;注意：通过 upstream 模块可以将请求分发到多个后端服务器，提高并发处理能力。日志优化12access_log /var/log/nginx/access.log main buffer=16k;error_log /var/log/nginx/error.log warn;注意：调整日志级别可减少日志输出量，提升性能。这表示将访问日志的缓冲区大小设置为 16KB，并将错误日志级别设置为 warn。"
  },
  {
    "title": "1Panel 全新移动 APP 上线",
    "author": "杜老师说",
    "date": "2025-06-05T16:00:00.000Z",
    "link": "https://dusays.com/810/",
    "content": "1Panel 作为新一代的服务器管理面板，为 Linux 服务器运维提供了一个舒适便捷的 Web 图形界面。为了方便移动办公，1Panel 推出了 APP 移动端，目前还在测试阶段，不过足以满足大多数用户的需求。功能满足多样需求1Panel APP 拥有丰富且实用功能特性，涵盖服务器管理的多个重要方面。它支持 Android 和 iOS 系统，确保不同设备用户都能享受到一致的服务体验。用户可以方便地添加多个 1Panel 服务，实现对多台服务器集中管理：首页全局概览表盘，以直观的方式展示服务器的关键信息，让用户一眼就能了解服务器整体运行状况：应用管理方面，1Panel APP 表现得十分出色。用户不仅能够查看已安装的应用，还能轻松进行安装、配置、管理操作，极大地简化了应用部署和维护的流程：对于网站管理，它提供专业的工具，方便用户对网站进行创建和编辑、删除操作，同时支持域名绑定和 SSL 证书配置，确保网站的安全性和稳定性：Docker 容器管理是 1Panel APP 的一大亮点。用户可以方便创建、启动、停止、删除容器，还可以对容器的资源进行合理分配和监控，满足了开发者和运维人员在容器化部署方面的需求：服务器状态监控功能则让用户实时掌握 CPU、内存、磁盘等资源的使用情况，及时发现潜在性能瓶颈，为服务器优化提供有力依据：获取使用资格方式目前 1Panel APP 正式版仅支持专业版用户使用，可以通过各大厂家应用商店安装手机端 APP。如果还不是 1Panel 专业版用户，又感觉官方的价格太贵，欢迎选择《1Panel 专业版低价租用》数量有限，先到先得！"
  },
  {
    "title": "1Panel自动同步Github仓库",
    "author": "LiuShen's Blog",
    "date": "2025-06-01T06:00:21.000Z",
    "link": "https://blog.liushen.fun/posts/327826ac/",
    "content": "之前使用的是宝塔面板，由于自带webhook，所以可以很方便的同步github仓库，达到更新网站的功能，但是由于目前转移到了1Panel，每次更新文章后都需要手动拉取，略显麻烦，所以研究了一下，最重使用action执行ssh链接并执行命令解决了这个问题。"
  },
  {
    "title": "解释器权限不够的处理思路",
    "author": "杜老师说",
    "date": "2025-05-30T16:00:00.000Z",
    "link": "https://dusays.com/809/",
    "content": "当我们在使用 Linux 系统进行开发或者运维工作时，经常遇到一些错误提示。其中一个常见错误是解释器权限不够。这个错误提示表明在运行 targetcli 命令，系统没有足够权限来执行所需的 Python 解释器。在本文中，我们将探讨这个错误原因和解决方法。错误原因为理解这个错误的原因，我们需要先了解下 Linux 系统的权限管理机制。Linux 系统将用户和组织分为不同的分类，并为每个用户和组织分配不同的权限。这些权限决定用户可以访问和执行哪些文件和目录。在这个特定错误中，我们看到了一个错误路径/usr/bin/targetcli 和错误消息/usr/bin/python3:解释器错误:权限不够。系统无法在路径/usr/bin/targetcli 下找到所需的 Python 解释器，且没有足够的权限来执行它。解决方法确定缺少的解释器首先，我们需确定缺少的 Python 解释器。在错误消息中，我们看到了/usr/bin/targetcli 和/usr/bin/python3 两个路径。这告诉我们 targetcli 命令需要 python3 来执行。确定解释器的位置接下来我们需要确定 python3 解释器的实际位置。我们可以使用 which 命令来找到解释器的路径。可在终端中运行命令 which python3。命令的输出将告诉我们 python3 解释器位置。比如，输出可能是/usr/local/bin/python3。修改 python3 解释器路径一旦我们找到了 python3 解释器的位置，我们可以通过修改 targetcli 脚本来更新解释器的路径。打开终端并输入命令 sudo vi /usr/bin/targetcli。这将使用编辑器打开 targetcli 脚本。在脚本中，我们需要查找#!/usr/bin/python3 这一行，并将其替换为 python3 解释器实际路径。在这个例子中，我们可以将其替换为#!/usr/bin/python3。更改脚本权限最后，我们需要为 targetcli 脚本提供执行权限。可在终端中运行命令 sudo chmod +x /usr/bin/targetcli。如果一切顺利，我们应该不再看到错误消息。"
  },
  {
    "title": "数据库可视化WEB工具对比",
    "author": "LiuShen's Blog",
    "date": "2025-05-25T10:00:21.000Z",
    "link": "https://blog.liushen.fun/posts/7915ee6b/",
    "content": "最近迁移服务器，并且搞了一个1P专业版玩玩，感觉效果很不错，想找一个管理数据库的服务，其中看了phpmyadmin等一些知名项目，但是都不太符合我的要求，最后经过筛选，找到了比较合适的，分享给大家！"
  },
  {
    "title": "dynv6 免费二级域名申请及管理",
    "author": "杜老师说",
    "date": "2025-05-24T16:00:00.000Z",
    "link": "https://dusays.com/808/",
    "content": "自飞牛 OS 支持虚拟机后，很多使用飞牛的小伙伴会询问杜老师有关 DDNS 的问题。希望可以白嫖一个二级域名，支持 API 变更解析值，且支持 IPv6 解析。恰好杜老师发现了一个网站，支持多后缀的二级域名白嫖，这里分享给需要的小伙伴们！什么是 dynv6dynv6 是一款免费的动态 DNS 服务，其专为 IPv6 设计。它允许用户将公共主机名轻松分配给私有主机，从而实现对私有主机的远程访问。dynv6 对所有用户免费开放。可以选择一个免费的主机名开始使用，或者将自己的域名委托给 dynv6。然而，需要注意的是，dynv6 目前并不提供企业级的 DDoS 防护和 SLA。因此，dynv6 适合用于非关键服务。强大的 API 支持dynv6 提供多种方式来更新区域，满足不同用户需求。其中包括 REST API 和 SSH 以及 DNS 更新。这些 API 的存在，使得 dynv6 的使用更加灵活、方便。无论是开发者还是普通用户，都可以根据自己的需求选择合适的 API 来更新 DNS 记录。此外，dynv6 支持 Webhooks 功能。当 IP 地址发生变化时 Webhooks 可以用来更新外部服务。官网地址dynv6 的官网地址如下：https://dynv6.com/https://dynv6.com/使用截图打开上面的官网后，点击右上角 Sign up 进行账号注册：完成账号登录后会自动登录，也可通过右上角 Sign in 进行登录。点击 Create new Zone 可白嫖免费二级域名：点击下拉框后，可以看到有多个后缀可选择，同时填写 IPv4 或者 IPv6 地址：若想托管顶级域名，可以点击导航栏 My Domains："
  },
  {
    "title": "使用 Docker 部署 tinyMediaManager 刮削工具",
    "author": "杜老师说",
    "date": "2025-05-18T16:00:00.000Z",
    "link": "https://dusays.com/807/",
    "content": "杜老师使用 Emby 管理媒体文件，但刮削时经常报错。tinyMediaManager 是款功能强大的开源媒体管理工具，能够帮助轻松整理和管理媒体库。本文将详细介绍 tinyMediaManager 的搭建过程和基本使用方法。什么是 tinyMediaManagertinyMediaManager 简称 TMM 是一款用 Java&#x2F;Swing 编写的媒体管理工具，能够为 Jellyfin、Emby 等媒体服务器提供元数据。通过 TMM 可以抓取和整理影片详细信息、封面图像、演员列表、导演信息等元数据，让媒体库更加丰富、完整。搭建准备准备好想要管理的电影、电视剧等媒体文件，并将其存放在一个固定的目录中，方便 TMM 进行扫描和管理。我们假设电影文件放入</path/to/movies>目录中，命令可参考 mkdir </path/to/movies>。电视文件放入</path/to/tv_shows/>目录中，命令可参考 mkdir </path/to/tv_shows/>。新建数据文件夹</path/to/local/data/>，命令可参考 mkdir </path/to/local/data/>。部署安装这里我们使用 Docker 来部署，docker-compose.yml 的参考内容如下：12345678910111213141516171819202122---version: \"2.1\"services: tinymediamanager: image: tinymediamanager/tinymediamanager:latest container_name: tinymediamanager environment: - USER_ID=1000 - GROUP_ID=100 - ALLOW_DIRECT_VNC=true - LC_ALL=en_US.UTF-8 # force UTF8 - LANG=en_US.UTF-8 # force UTF8 - PASSWORD=<password> - TZ=Asia/Shanghai volumes: - </path/to/local/data/>:/data - </path/to/movies>:/media/movies - </path/to/tv_shows/>:/media/tv_shows ports: - 5900:5900 # VNC port - 4000:4000 # Webinterface restart: unless-stopped将上方代码中<password>改为 TMM 访问密码，配置好后执行如下命令即可：1docker-compose up -d基本使用第一次启动时，会进入 TMM 设置向导。需要选择媒体类型、设置媒体目录路径、选择元数据来源等。按照向导提示逐步完成设置即可：设置完成后 TMM 会自动扫描指定的媒体目录，识别其中媒体文件，并尝试从在线数据库中获取相应的元数据：TMM 会根据文件标题到电影资料网站上匹配电影信息，下载电影资料及图片到本地。可以查看和编辑这些元数据，确保信息的准确性和完整性：TMM 还可按照一定的规则批量重命名和整理媒体文件，使文件名称更加规范和统一，方便管理、查找："
  },
  {
    "title": "RSSHub 搭建指南打造个性化资讯中心",
    "author": "杜老师说",
    "date": "2025-05-12T16:00:00.000Z",
    "link": "https://dusays.com/806/",
    "content": "RSSHub 可以根据我们的需求生成个性化的 RSS 订阅源，让我们轻松地获取到各种平台的最新资讯。本文将详细介绍 RSSHub 搭建过程，快速搭建起属于自己的资讯中心。RSSHub 的简介RSSHub 是一个轻量、易于扩展 RSS 生成器，它基于 Node.js 开发，支持多种平台和类型订阅源，包括但不限于微博、知乎、B 站、GitHub 等。通过简单的配置和路由规则，我们就能生成自己想要的 RSS 订阅链接，随时随地获取最新内容更新。搭建前的准备在开始搭建 RSSHub 之前，我们需做一些准备工作。需一台服务器，可以是云主机，也可以是本地的计算机。服务器需要具备公网 IP 地址，以便我们能够从外部访问搭建好的 RSSHub 服务。RSSHub 基于 Docker 部署，因此需要在服务器上安装 Docker 环境。RSSHub 支持缓存中间件，如 Redis。为方便访问和使用，建议注册一个域名，并将其解析到服务器的 IP 地址上。RSSHub 的搭建步骤将下面的内容保存为 docker-compose.yml 文件：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950services: rsshub: # two ways to enable puppeteer: # * comment out marked lines, then use this image instead: diygod/rsshub:chromium-bundled # * (consumes more disk space and memory) leave everything unchanged image: diygod/rsshub restart: always ports: - \"1200:1200\" environment: NODE_ENV: production CACHE_TYPE: redis REDIS_URL: \"redis://redis:6379/\" PUPPETEER_WS_ENDPOINT: \"ws://browserless:3000\" # marked healthcheck: test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:1200/healthz\"] interval: 30s timeout: 10s retries: 3 depends_on: - redis - browserless # marked browserless: # marked image: browserless/chrome # marked restart: always # marked ulimits: # marked core: # marked hard: 0 # marked soft: 0 # marked healthcheck: test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/pressure\"] interval: 30s timeout: 10s retries: 3 redis: image: redis:alpine restart: always volumes: - redis-data:/data healthcheck: test: [\"CMD\", \"redis-cli\", \"ping\"] interval: 30s timeout: 10s retries: 5 start_period: 5svolumes: redis-data:使用下面命令来启动 RSSHub 服务：1docker-compose up -d如需拉取新版 RSSHub 的镜像，可使用下面的命令：1docker-compose pull如需停止服务，可使用下面的命令：1docker-compose down如果不喜欢使用 Docker Compose 部署，可使用下面的命令运行有 Puppeteer 依赖的 RSSHub 服务：1docker run -d --name rsshub -p 1200:1200 diygod/rsshub:chromium-bundled可使用下面的命令运行无 Puppeteer 依赖的 RSSHub 服务：1docker run -d --name rsshub -p 1200:1200 diygod/rsshub为 Follow 添加实例如果使用 Follow 调用 RSSHub 示例，需在 docker-compose.yml 中添加一些变量。其中 FOLLOW_OWNER_USER_ID 是指您的关注账户 ID 或用户名；FOLLOW_DESCRIPTION 指实例描述；FOLLOW_PRICE 指实例月费，如设为 0 表示免费；FOLLOW_USER_LIMIT 指实例用户限制，将其设置为 0 或 1 可将实例设为私有，留空则表示无限制；ACCESS_KEY 指访问密钥：123456789101112131415161718services: rsshub: image: diygod/rsshub:chromium-bundled restart: always ports: - \"1200:1200\" environment: NODE_ENV: production FOLLOW_OWNER_USER_ID=杜老师说 FOLLOW_DESCRIPTION=大带宽境外服务器 FOLLOW_PRICE=1 FOLLOW_USER_LIMIT=1000 ACCESS_KEY=ubzG7H3t9TJaFp healthcheck: test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:1200/healthz\"] interval: 30s timeout: 10s retries: 3登录 Follow 后，点击头像，选择 RSSHub 项。在显示页面中，点添加新实例。依次输入 RSSHub 的地址，访问密钥，最后点击添加即可："
  },
  {
    "title": "本地实现HEXO文章AI摘要",
    "author": "LiuShen's Blog",
    "date": "2025-05-06T16:00:21.000Z",
    "link": "https://blog.liushen.fun/posts/40702a0d/",
    "content": "五一假期结束啦！这五天啥也没干，就在宿舍敲代码，都快无聊死了，恰逢找到了一些免费API，就自己实现一个AI摘要吧！利用API生成摘要文本放在文章头部，再通过hexo进行渲染就好啦！"
  },
  {
    "title": "加密 NFS 搭建保障数据传输与存储安全",
    "author": "杜老师说",
    "date": "2025-05-06T16:00:00.000Z",
    "link": "https://dusays.com/805/",
    "content": "在现代企业环境中，数据的安全性至关重要。NFS 作为一种广泛使用的文件共享协议，其数据在传输和存储过程中若是缺乏加密保护，将面临被窃取或篡改的风险。本文将详细介绍加密 NFS 搭建过程。NFS 的简介NFS 是允许用户通过网络访问远程文件系统，就像访问本地文件系统一样方便。它支持跨平台文件共享，广泛应用于 Linux 和 Unix 系统。然而，传统的 NFS 传输数据时以明文形式在网络中传输，很容易受到中间人攻击和数据泄露的威胁。在 NFS 的基础上，我们可以使用加密技术来保护数据传输和存储。加密 NFS 必要性随着数据安全法规的日益严格和企业对数据保护的重视，对 NFS 进行加密变得必不可少。在企业中，NFS 的加密功能可以提供数据传输和存储的安全保障。加密 NFS 可有效防止数据在传输过程中被窃取或篡改，确保数据的完整性和机密性。同时，它也可以满足企业对数据安全合规的要求，为企业的数据资产提供更可靠的保护。搭建加密 NFS 的步骤在 NFS 服务器安装支持加密的 NFS 软件包。例如，在基于 Debian 的系统上，可以使用下面命令进行安装：1sudo apt -y install nfs-kernel-server使用下面的命令编辑 NFS 配置文件，添加加密相关选项。例如，可使用 sec = krb5i 或 sec = krb5p 选项来启用 Kerberos 加密。其中，krb5i 提供数据完整性保护，而 krb5p 则同时提供了数据加密和完整性保护：1sudo vim /etc/exports在配置文件中指定要共享的目录及其访问权限。这表示允许客户端 IP 以读写模式访问共享目录，并启用 Kerberos 加密。例如：1/path/to/shared/directory client_ip(rw,sync,no_subtree_check,sec=krb5i)完成配置后重启 NFS 服务。可以使用下面命令重启服务：1sudo systemctl restart nfs-kernel-server使用下面的命令使配置文件生效：1exports -rv在需访问加密 NFS 共享的客户端上安装 NFS 客户端软件。例如，在基于 Debian 的系统上，可以使用下面命令进行安装：1sudo apt -y install nfs-common使用挂载命令将加密的 NFS 共享挂载到本地目录。这将把服务器上的共享目录挂载到客户端本地目录，并启用 Kerberos 加密。例如：1sudo mount -t nfs4 -o sec=krb5i server_ip:/path/to/shared/directory /local/mount/point使用下面命令查看挂载文件系统，确保加密 NFS 共享已成功挂载：1df -h 加密 NFS 优势与注意事项加密 NFS 有多种优势，例如数据加密传输、身份认证和数据完整性保护等等。它能够有效防止数据泄露和篡改，提高数据的安全性。然而，在搭建加密 NFS 时也需要注意一些事项。首先，加密过程可能会增加系统的性能开销，因此需根据实际需求进行性能评估和优化。其次，配置过程较为复杂，需仔细检查配置文件和参数设置，确保正确无误。此外，还需要定期更新加密软件和认证机制，以应对不断变化的安全威胁。"
  },
  {
    "title": "去不图床数据清理通知",
    "author": "杜老师说",
    "date": "2025-04-30T16:00:00.000Z",
    "link": "https://dusays.com/804/",
    "content": "近期发现外链流量激增，经分析了解并非是攻击导致，通过 URL 判断其来源是一些匿名及到期用户所上传的图片。因此决定发文公告：清理去不图床所有匿名用户所上传的图片，并周期检查已到期用户。免费服务的初心与挑战2019 年，去不图床怀着为各位小伙伴提供免费、便捷图片托管服务赤子之心，正式上线！那会儿杜老师的目标就是给大伙儿搭个稳定可靠的平台，让大家轻轻松松的分享图片，舒舒服服存储图片。这服务的确是受到了大家的一致好评，用户数量跟图片上传量，那叫一个节节攀升，直冲云霄！可是好景不长，随着用户规模像滚雪球一样越滚越大，这流量成本也成了杜老师心头一块大石头。图片托管需要海量的带宽和存储空间，这费用那是哗哗地往外流啊！杜老师也是一直在绞尽脑汁优化成本，可那流量费用，像脱缰的野马，一发不可收拾，最终，在 2021 年不得不调整策略，从免费转向了收费，这都是为了咱这平台能继续坚挺地活下去！流量成本与运营的压力虽然 2021 年去不图床改成收费模式，但之前游客用户免费上传的图片，一直没有清理。这些图片，虽然丰富了平台的内容，但是占用的存储空间和流量资源，那也是相当可观啊！据统计游客上传的图片数量，那简直是天文数字，而且很多图片访问频率低得可怜，却依然霸占着咱宝贵的存储资源！随着平台业务蒸蒸日上，对流量成本的控制也越来越严格。现在运营环境，杜老师得精打细算，合理分配资源，保证已兑换容量的小伙伴能享受到更优质、更稳定的服务。所以，经过一番深思熟虑，杜老师决定对游客用户的图片进行清理啦！匿名用户上传图片清理为了降低流量以及存储损耗，优化资源分配，杜老师将于 2025 年 3 月 1 日起，清理所有游客用户上传图片。这个决定，杜老师也是万般的无奈，但这是目前运营环境下，必须采取的措施啊！希望各位游客用户能够理解杜老师的苦衷，赶紧备份需要保存的图片吧！如有疑问，欢迎随时在评论区留言！游客数据保留至本月中「2025 年 3 月 15 日」因为无法进行用户判定，所以杜老师已经整体打包备份了，需要的小伙伴可留言索要图片压缩包。到期用户上传图片清理为了进一步降低流量及存储损耗，优化资源分配，杜老师将于 2025 年 3 月 15 日起，清理所有到期用户上传图片。已到期的用户数据清理规则如下：当月 15 日之前到期用户，数据保留至当月的最后一天；当月 15 日之后到期用户，数据保留至下个月月中。数据清理之前，杜老师都会邮件通知用户进行再续费，通知七天后未续费则会清理数据「即当月 15 日之前到期的用户，会在当月 23 日发送通知；当月 15 日之后到期用户，会在次月 8 日发送通知」注意图片清理是多节点同步执行，不会保留备份数据！最终解释权归去不图床所有。"
  },
  {
    "title": "耗子面板和DPanel简单体验",
    "author": "LiuShen's Blog",
    "date": "2025-04-28T14:47:21.000Z",
    "link": "https://blog.liushen.fun/posts/5f71a4b1/",
    "content": "最近毕业设计临近尾声，代码也敲完了，目前就剩稍微的调优，就可以开始写论文啦！在闲暇时间，我也尝试部署了一些不一样的面板程序，总感觉1panel稍微有些复杂，很多功能并用不上，比如GPU，下面简单分享一下我的体验。"
  },
  {
    "title": "使用 Python 脚本验证指定目录的图片文件",
    "author": "杜老师说",
    "date": "2025-04-24T16:00:00.000Z",
    "link": "https://dusays.com/803/",
    "content": "有小伙伴说杜老师说侧边栏随机图片素材太少，翻来覆去只有那么几张。为了充实随机图片，杜老师采集了一个图片网站。奈何能力有限，某些图片采集失败，保存为空文件，所以需要编写一个脚本，来验证图片是否为正常。代码需求使用 Python 语言编写一个小项目，需要遍历指定目录下所有子目录「子目录名称为中文」验证子目录下的图片文件是否能正常打开，如果能则跳过，如果无法正常打开则返回其路径。变更解释使用 os 模块来遍历目录和子目录；使用 PIL 库来验证图片文件是否能正常打开。注意事项请确保安装了 Pillow 库，可以使用下面的命令来安装：1pip install pillow将 root_directory 变量设置为需要遍历的目录路径：12345678910111213141516171819202122232425262728import osfrom PIL import Imagedef validate_images_in_directory(root_dir): invalid_image_paths = [] for dirpath, dirnames, filenames in os.walk(root_dir): for filename in filenames: if filename.lower().endswith((&#x27;.png&#x27;, &#x27;.jpg&#x27;, &#x27;.jpeg&#x27;, &#x27;.gif&#x27;, &#x27;.bmp&#x27;)): file_path = os.path.join(dirpath, filename) try: with Image.open(file_path) as img: img.verify() # 尝试验证图片文件 except (IOError, SyntaxError) as e: invalid_image_paths.append(file_path) return invalid_image_pathsif __name__ == \"__main__\": root_directory = &#x27;指定目录路径&#x27; # 替换为实际的目录路径 invalid_images = validate_images_in_directory(root_directory) if invalid_images: print(\"无法打开的图片文件路径：\") for path in invalid_images: print(path) else: print(\"所有图片文件都能正常打开。\")执行代码1python3 images.py注意：将上面的代码保存为 images.py 文件，然后在命令行中执行上面的命令。"
  },
  {
    "title": "探索 Linux 内存占用找出最吃内存的进程",
    "author": "杜老师说",
    "date": "2025-04-18T16:00:00.000Z",
    "link": "https://dusays.com/802/",
    "content": "无论是服务器还是个人电脑，了解哪些进程占用了最多的内存，对于系统管理员和普通用户来说至关重要。不仅可以帮助我们优化系统性能，还能避免因内存不足而导致系统崩溃。本文将介绍如何在 Linux 系统中统计内存占用最多的前 10 个进程。为什么要统计内存占用多任务操作系统中，内存是有限的资源。当多个进程同时运行时，它们会争夺有限的内存空间。如果某些进程占用内存过多，可能导致系统响应变慢，甚至出现内存不足错误。因此，定期检查内存占用情况，找出占用最多进程，可以帮助我们更好管理资源，优化系统性能。使用命令工具统计内存占用使用 ps 和 sort 的命令组合：1ps -eo pid,comm,%mem --sort=-%mem | head -n 11解释：参数作用ps -eo pid,comm,%mem列出所有进程的 PID、进程名称和内存占用百分比。–sort&#x3D;-%mem按内存占用百分比降序排序。head -n 11显示前 11 行的内容「第一行是标题，接下来是前 10 个进程的信息」虽然 top 命令主要用于实时的监控系统资源，但也可通过以下方式快速查看内存占用最多的进程：1top -o %MEM -b -n 1 | head -n 18解释：参数作用-o %MEM按照内存占用排序。-b以批处理模式运行，输出到终端上。-n 1只需运行一次。head -n 18过滤出前 18 行「因为 top 输出的前几行是系统信息，实际进程从第 8 行开始」如果需要更详细的内存占用信息，可结合 pmap 命令：1ps -eo pid,%mem,comm --sort=-%mem | head -n 11 | awk &#x27;&#123;print $1&#125;&#x27; | xargs -I &#123;&#125; pmap &#123;&#125; | grep total解释：参数作用ps -eo pid,%mem,comm –sort&#x3D;-%mem获取内存占用最高的进程 PID。awk ‘{print $1}’提取 PID 进程号。xargs -I {} pmap {}获取每个进程详细内存映射信息。grep total过滤 total 行，显示每个进程的总内存占用情况。如果系统安装了 smem 工具，可以更直观地查看内存占用：1smem -s rss -c \"pid user command rss\" --sort=rss | head -n 11解释：参数作用-s rss按 RSS 排序。-c “pid user command rss”指定显示的列。–sort&#x3D;rss按 RSS 排序。head -n 11显示前 11 行的内容。如何分析内存占用情况确认进程是否必要。有些进程可能是系统正常运行所必需，例如 systemd 等。这些进程通常不会占用过多内存。然而，如果某些进程是用户启动的，如某个应用程序或脚本，需确认它们是否在正常运行。检查进程是否内存泄漏。如某个进程的内存占用持续增加，可能是内存泄漏导致的。内存泄漏是指程序在申请内存后，无法正确释放已分配的内存，导致内存占用不断增加。这种情况下需要检查程序的代码，查找可能导致内存泄漏地方。限制进程内存使用。如果某个进程占用过多内存，但又不能轻易终止，可以尝试限制它的内存使用。Linux 提供 ulimit 命令，可设置进程的资源限制。例如，限制某个进程的最大内存使用量为 1GB，可使用命令 ulimit -m 1048576。内存管理其它技巧除了统计内存占用最多进程，还可通过以下方式优化 Linux 系统的内存管理。调整交换空间。交换空间是磁盘上的一部分空间，当物理内存不足时，系统会将一些不常用的内存页面移到交换空间。虽然使用交换空间可以避免系统崩溃，但磁盘速度远慢于内存，因此过多地使用交换空间会导致系统性能下降。可以通过命令 swapon --show 查看交换空间的使用情况。如果交换空间使用过多，可以考虑增加物理内存，或者调整交换空间大小。使用内存清理工具。Linux 系统会自动管理内存分配、回收，但有时也可以手动清理内存。例如，可以使用 sync 命令将缓存数据写入磁盘，然后用 echo 3 > /proc/sys/vm/drop_caches 命令清理缓存。但请注意，这种方法可能会对系统性能产生一定影响，因此需要谨慎使用。"
  },
  {
    "title": "美化你的RSS订阅地址",
    "author": "LiuShen's Blog",
    "date": "2025-04-18T12:47:21.000Z",
    "link": "https://blog.liushen.fun/posts/caee2d9f/",
    "content": "近期天天忙着毕业设计，冷落了站点文章的更新，最近也终于算是快要搞完了，于是开始捣鼓一些好玩的东西，在浏览阮一峰大佬的周刊时，了解到了RSS也能美化，折腾了一下，没想到还真实现了，在此分享一下。"
  },
  {
    "title": "使用 SlimToolkit 打造更小的容器镜像",
    "author": "杜老师说",
    "date": "2025-04-12T16:00:00.000Z",
    "link": "https://dusays.com/801/",
    "content": "现在容器技术很火，镜像又肥又大，部署较慢不说，安全风险还蹭蹭往上窜，简直让人头大！SlimToolkit 就像一位经验老道的镜像瘦身大师，能把镜像体积缩小到令人咋舌的程度，最多能瘦 30 倍！到底是啥简单来说，SlimToolkit 就是一个开源的镜像减肥专家，它能智能分析镜像，找出那些又大又没用的文件、库和依赖，然后干净利落地咔嚓下，统统删掉！就像一位技艺精湛的雕塑家，将冗余的部分精雕细琢，留下最精髓的部分。之前叫 DockerSlim，现在已经是云原生计算基金会沙盒项目了，实力是杠杠的！它的核心思想就是原封不动优化，通过动态、静态分析，自动识别并移除镜像里垃圾文件。支持 Docker 以及 Kubernetes，各种类云原生工具，妥妥全能选手！不只瘦身，还可以提供命令行工具，方便检查、调试、管理镜像，简直贴心到家！SlimToolkit 的绝活镜像瘦身大法：这是它的看家本领！它能像一位经验丰富的裁缝，精准剪裁镜像，去除冗余部分。如一个基于 Ubuntu 的 Python 应用，原本约 438MB，经过它的一通操作，能瘦到 16.8MB，足足瘦了 26 倍！安全防护专家：它不仅能瘦身，还可以增强安全性！它可以自动生成 Seccomp 和 AppArmor 安全配置文件，像给容器穿上了一层坚不可摧的盔甲，限制系统调用，防止各种安全漏洞入侵。再也不用担心容器被黑客攻破了！动态分析、调试：它就像一位经验丰富的侦探，可以创建一个临时容器模拟运行环境，通过 HTTP 探针等方式收集运行数据，分析应用程序行为，确保瘦身后的镜像依然可以正常工作。而且，它还提供调试工具，在优化后的容器中运行调试命令，排查问题方便！无缝集成：它就像一位老练的管家，能无缝集成到开发和部署流程中。不用改动 Dockerfile 或构建工具，只需在构建过程中添加 SlimToolkit 的优化步骤即可。还支持各种 CI&#x2F;CD 工具，如 Jenkins、GitHub Actions 等，自动化部署 so easy！上手玩转先安装 SlimToolkit。SlimToolkit 提供了多种安装方式，含直接下载二进制文件、使用脚本安装或通过 Docker 运行。对于大多数的用户，使用脚本安装是最简单方式：1curl -sL https://raw.githubusercontent.com/slimtoolkit/slim/master/scripts/install-slim.sh | sudo -E bash -优化容器镜像。假设已经有一个 Docker 镜像，如一个基于 Python 的 Web 应用。可使用以下命令对镜像进行优化：1slim build my/sample-python-appSlimToolkit 会自动创建一个临时容器，运行动态分析，并生成优化后镜像。优化后的镜像名称会自动加上.slim 后缀，例如：1my/sample-python-app.slim验证优化效果。优化完成后可以使用以下命令查看优化后镜像大小：1docker imagesSlimToolkit 的优势自动与智能化：它能够自动识别容器中不必要的部分，并且进行优化，无需开发者手动修改 Dockerfile 或者删除文件。这种自动化不仅节省了时间，还减少了人为错误的可能性。安全：通过生成 Seccomp 和 AppArmor 的配置文件，SlimToolkit 为容器提供了额外的安全保障。这些配置文件能够限制容器系统调用，防止潜在安全威胁，而无需开发者深入了解安全框架细节。无缝集成：SlimToolkit 设计目标是无缝集成到现有的开发和部署流程中。它支持多种容器运行时和 CI&#x2F;CD 工具，能够轻松集成到自动化构建和部署流程中。开发者无需改变现有的工具链或工作流程，即可享受 SlimToolkit 带来的优化效果。开源：完全开源，社区活跃，有问必答！"
  },
  {
    "title": "PaddleYOLO训练自己的数据集",
    "author": "LiuShen's Blog",
    "date": "2025-04-08T07:27:21.000Z",
    "link": "https://blog.liushen.fun/posts/4bb33804/",
    "content": "近期一直在研究毕业设计，在其中，我涉及到了PaddleYOLO的训练和部署，在网上的教程较少，经过不断努力，我也算是跑出来了，所以在这里分享出来做个记录，防止下次使用又忘记了怎么搞。"
  },
  {
    "title": "图片为啥用 Base64 格式进行传输",
    "author": "杜老师说",
    "date": "2025-04-06T16:00:00.000Z",
    "link": "https://dusays.com/800/",
    "content": "在互联网的世界里，图片传输是再平常不过的事情了，而 Base64 格式常常出现在这一过程中。那为啥图片要用 Base64 格式来传输呢？这背后有不少门道。本文将介绍 Base64 格式的应用场景和优点，以及一些应用场景下的缺点。Base64 是什么Base64 是种用 64 个可打印字符来表示二进制数据的编码方法。这 64 个字符含大小写字母各 26 个，还有 10 个数字以及两个符号。例如，当我们看到一串像 SGVsbG8gV29ybGQh 这样的字符，这就是 Base64 编码后的结果，其实代表了 Hello World！易于文本传输在很多网络传输场景中，尤其是早期的网络应用，传输通道主要被设计为传输文本数据。因为文本数据格式相对简单、统一，而且不容易出现乱码等问题。而图片是二进制的数据，直接传输二进制数据可能会因为不同系统、不同软件对二进制数据的处理方式不同而出现问题。Base64 把图片的二进制数据转换成了文本形式。这样一来，通过电子邮件、网页表单等主要以文本传输为主的渠道时，图片就可以顺利跟着文本一起传输了。比如，在发送带有图片附件的电子邮件，邮件系统会把图片转换成 Base64 格式，然后和邮件的正文一起发送。接收方收到邮件后，邮件客户端再把 Base64 格式的数据转换回图片，这样我们就能看到图片。兼容性好不同的操作系统和不同的软件应用对数据处理方式可能存在差异。Base64 编码后的文本数据在各种平台都能被正确识别和处理。例如，一个在 Windows 系统上生成的 Base64 编码的图片数据，在 Linux 服务器上也能轻松解码并还原成图片，不用担心因为平台不同而出现数据损坏或者无法读取的情况。几乎所有的编程语言都有内置的库或者函数来处理 Base64 编码和解码。这使得开发人员在开发涉及图片传输的应用程序时，能够很方便使用 Base64 格式。比如，在一个基于 Python 的 Web 应用，开发人员可以使用库轻松地将图片文件读取并编码为 Base64 格式，然后通过网络发送给服务器或客户端。方便在网页中嵌入图片在网页设计中，如果一个网页中有大量的小图标或小图片，每次加载这些图片都需要发送一个 HTTP 请求。这不仅会增加服务器的负担，还会影响网页加载速度。而将这些小图片转换为 Base64 格式后，可以直接将 Base64 编码的数据嵌入到 HTML 或 CSS 文件中。这样浏览器在加载 HTML 或 CSS 文件的时候，就可以直接读取到图片数据，而不需要单独发送 HTTP 请求去获取图片，从而提高了网页的加载效率。嵌入 Base64 格式的图片还可以简化网页的结构。不需要在网页文件目录中单独存放这些小图片文件，减少了文件管理复杂性。对于一些简单的网页应用或前端框架，这种方式非常实用。安全性的考虑虽然 Base64 编码不能算是真正的加密方法，但它在一定程度上可起到隐藏信息的作用。因为对于不了解 Base64 编码的人来说，看到一串 Base64 编码的数据可能不知道它代表的是图片内容。在一些对安全性要求不是特别高的场景下，可作为一种简单的保护措施。比如，在一些内部文档分享系统中，把图片转换 Base64 格式传输，可防止非授权用户轻易地获取到原始图片文件。在某些情况下，直接传输二进制图片文件可能会带来安全风险，如图片文件可能被恶意篡改，包含恶意代码。将图片转换为 Base64 格式后，这些恶意代码在 Base64 编码文本环境中很难被执行，从而降低安全风险。缺点不过，Base64 传输图片也有其缺点。比如，Base64 编码后数据量比原始的二进制图片数据要大，大概会增加百分之三十三左右的大小。所以在传输大图片或者对带宽要求很高的场景，可能需要权衡下是否使用 Base64 格式。"
  },
  {
    "title": "DPanel 让 Docker 管理变得轻松又高效",
    "author": "杜老师说",
    "date": "2025-03-31T16:00:00.000Z",
    "link": "https://dusays.com/799/",
    "content": "Docker 作为容器化领域的佼佼者，其强大的功能和灵活性，赢得众多开发者的青睐。然而，对于许多用户来说，Docker 的命令行操作可能显得有些复杂和繁琐。幸运的是，DPanel 的出现为 Docker 的管理和使用带来了全新的体验。什么是 DPanelDPanel 是一款轻量化的 Docker 可视化管理面板，专为简化容器的管理而设计。它提供一套完善的容器管理功能，让用户可通过直观的图形界面轻松管理 Docker 容器，无需深入复杂的命令行操作。无论是初学者还是经验丰富的开发者，DPanel 都能帮助他们更高效地管理和部署容器。DPanel 的优势DPanel 的界面简洁直观，操作简单易懂，即使新手也能轻松上手。DPanel 提供了丰富功能，涵盖了网站管理的各个方面，能够满足各种用户的需求。基于容器设计，安装和部署都非常简单。用户无需复杂配置，只需通过简单步骤即可快速启动面板。其简洁直观操作界面让用户能够轻松上手，即使是第一次接触 Docker 的用户也能快速掌握基本操作。DPanel 与 Docker 官方的兼容性非常好，能够无缝对接 Docker 的各项功能。支持多种操作系统和 Docker 版本，确保用户在不同环境下都能稳定使用。服务安装我们可以使用官方提供的集成脚本安装 DPanel。当宿主机没有 Docker 环境时，集成脚本会尝试安装 Docker 环境：1curl -sSL https://dpanel.cc/quick.sh -o quick.sh && sudo bash quick.sh按照提示操作。安装完成后通过浏览器访问面板地址，即可进入管理界面：123456789101112131415161718192021222324252627282930313233343536373839404142434445[DPanel Install Log]: 选择你需要安装的版本 1. 标准版 (需要绑定 80 及 443 端口)2. Lite版 (不包含域名转发相关功能)3. 标准版 (Pro)4. Lite版 (Pro)5. Beta版 (内测版本)输入你要安装的版本编号 [默认: 2]: 11. Docker Hub2. ALiYun选择镜像源 [默认: 1]: 2[DPanel Install Log]: 你安装使用的镜像为 registry.cn-hangzhou.aliyuncs.com/dpanel/dpanel:latest [DPanel Install Log]: 设置 DPanel 容器名称，更新面板时请配置为当前面板容器名称 请输入名称 [默认: dpanel]: [DPanel Install Log]: 你指定的容器名称为 dpanel 设置 DPanel 容器挂载目录 [默认: /home/dpanel]: [DPanel Install Log]: 您选择的面板容器挂载目录是 /home/dpanel 设置 DPanel 端口 [默认: 25128]: [DPanel Install Log]: 您设置的端口是: 25128 [DPanel Install Log]: 如果端口已经被占用，请再次执行脚本更换端口后重新安装 Unable to find image &#x27;registry.cn-hangzhou.aliyuncs.com/dpanel/dpanel:latest&#x27; locallylatest: Pulling from dpanel/dpanel1f3e46996e29: Pull complete b6dde5f749cd: Pull complete 459b8d93d51a: Pull complete 7d52a0c67d85: Pull complete 4b97f8a613e7: Pull complete 1d46bacd0854: Pull complete 3eac9a9b4fcb: Pull complete 2c5c0b90bb2b: Pull complete 4f4fb700ef54: Pull complete Digest: sha256:9daa4f411b2bd7845cfd71e747ba2827797ea5fe9e754b8db475541c3700ba01Status: Downloaded newer image for registry.cn-hangzhou.aliyuncs.com/dpanel/dpanel:latestd492b83d8c546297836a8735d73f0b3f8943f134065dea4ef5ffff834f028715[DPanel Install Log]: [DPanel Install Log]: =================感谢您的耐心等待，安装、升级已完成================== [DPanel Install Log]: [DPanel Install Log]: 请使用您的浏览器访问面板，并初始化管理员帐号: [DPanel Install Log]: 外部地址: http://123.116.127.26:25128 [DPanel Install Log]: 内部地址: http://192.168.31.187:25128 [DPanel Install Log]: 如果您使用的是云服务器，请在安全组中打开端口 25128 [DPanel Install Log]: [DPanel Install Log]: 官方网站及文档: https://dpanel.cc [DPanel Install Log]: 代码仓库: https://github.com/donknap/dpanel [DPanel Install Log]: [DPanel Install Log]: ================================================================ 面板效果首页概览：容器管理：文件管理：镜像管理：创建镜像：系统管理："
  },
  {
    "title": "Hexo配置SWPP实现PWA",
    "author": "LiuShen's Blog",
    "date": "2025-03-28T06:53:00.000Z",
    "link": "https://blog.liushen.fun/posts/4355f2b3/",
    "content": "前几天，我调整了网站样式，但受浏览器缓存机制影响，更新后无法立即生效，需要手动刷新。为优化体验，我向空梦大佬请教了SWPP配置，最终实现了自动更新样式，并成功部署了PWA，在此分享给大家。"
  },
  {
    "title": "本博出现图碎问题说明",
    "author": "杜老师说",
    "date": "2025-03-25T16:00:00.000Z",
    "link": "https://dusays.com/798/",
    "content": "近期本博访问时出现了图碎问题，经排查系 CDN 回源失败导致的。有小伙伴可能会说，保证成功就可以修复了，其实没有那么简单。本文简单描述下存储节点数据流，顺便科普一下如何清理单站数据缓存。数据流向通过下图可以看出，图片文件保存在主机上，通过转换处理为 WebP 格式文件，经由 CDN 回源并实现访问加速：问题分析登录 CDN 管理后台查看其日志，发现出现超时记录。超时原因一般两种，一种是因线路问题导致回源超时，一种是因主机没有及时返回数据造成。本地图片经由 WebP 中间件处理，再回源给 CDN 做反代，经查是 WebP 服务突然宕机导致 CDN 未收到响应数据导致超时。除超时问题外，因无返回数据导致 CDN 响应 404，而服务器设置 404 默认跳转至主站首页，这就导致好多小伙伴频繁刷新页面依然不显示图片。解决方案目前已关闭 CDN，流量直接回源至源主机，缺点就是会影响访问的速度。带调试维护后会重新挂上 CDN。WebP 图片转换是为了减少图片体积，进而减轻带宽压力「轻量级服务器有流量的限制」因此不能暂停使用，已修改其参数，尽量保障响应的成功率。如之前有访问记录，会留下 404 跳转缓存，需要清理相关数据。有小伙伴分享了两种清理缓存的方法，需要的小伙伴可以参考操作。清理缓存首先进入到浏览器的开发者工具，一般浏览器点击F12即可，进入更多设置，勾选 Disable cache while DevTools is open 项：或者切换到网络标签页，勾选禁用缓存，刷新页面即可「注意保持开发者工具一直处于开启的状态」"
  },
  {
    "title": "Cloudflare/Vercel项目推荐(4)",
    "author": "LiuShen's Blog",
    "date": "2025-03-20T13:52:00.000Z",
    "link": "https://blog.liushen.fun/posts/43f0ef13/",
    "content": "很久没有推荐项目啦，之前的三次项目分享反馈都很好，涵盖了很多领域的项目，大家也很喜欢那些项目，近期我又收集了一些，数量达到了，那就再来分享一些吧！项目很难找的QAQ!"
  },
  {
    "title": "新版本去不图床免费公测开始啦",
    "author": "杜老师说",
    "date": "2025-03-19T16:00:00.000Z",
    "link": "https://dusays.com/797/",
    "content": "有不少的小伙伴为去不图床提供建议，包括但不限于增加支持格式、图片处理、水印功能等等。杜老师也收集了这些建议转交给程序的设计者，经过了几个月更新迭代，V2 版本已推出。由于使用了新框架，无论是操作逻辑和功能支持，都有较大改变，所以在正式上线前，杜老师决定免费公测下！新版界面新版主页相较老版而言更加简洁，仅包含站点名称及描述信息，还有图片托管数据。最下方是两个功能入口，一个是图片上传的窗口，一个是用户登录的界面：在上传界面中，可以选择从本地计算机上传图片文件，也可接入到摄影头，拍摄照片后再上传。目前支持访客上传，所有图片会经过审核后存放在服务器：用户可以通过邮箱、用户名两种方式来登录。目前程序强制要求注册用户进行邮件验证，不能关闭验证。但因 bug 收不到验证信息，所以杜老师提供了一些体验账号用需要的小伙伴们使用：在用户的仪表盘中可看到当前拥有的存储容量，可以查看图片、相册、分享，可以购买订阅、查看订单，提交工单或申请 API Tokens：体验账号体验账号密码统一为 7bu.top，默认容量为 1G。如选择了账号，请在评论区中留下编号，杜老师会根据使用备注信息，避免有小伙伴重复选择账号：编号账号邮箱备注1dusays1dusays1@dusays.com已用2dusays2dusays2@dusays.com暂无3dusays3dusays3@dusays.com暂无4dusays4dusays4@dusays.com暂无5dusays5dusays5@dusays.com暂无6dusays6dusays6@dusays.com暂无7dusays7dusays7@dusays.com暂无8dusays8dusays8@dusays.com暂无9dusays9dusays9@dusays.com暂无10dusays10dusays10@dusays.com暂无11dusays11dusays11@dusays.com暂无12dusays12dusays12@dusays.com暂无13dusays13dusays13@dusays.com暂无14dusays14dusays14@dusays.com暂无15dusays15dusays15@dusays.com暂无16dusays16dusays16@dusays.com暂无17dusays17dusays17@dusays.com暂无18dusays18dusays18@dusays.com暂无19dusays19dusays19@dusays.com暂无20dusays20dusays20@dusays.com暂无21dusays21dusays21@dusays.com暂无22dusays22dusays22@dusays.com暂无23dusays23dusays23@dusays.com暂无24dusays24dusays24@dusays.com暂无25dusays25dusays25@dusays.com暂无26dusays26dusays26@dusays.com已用27dusays27dusays27@dusays.com暂无28dusays28dusays28@dusays.com暂无29dusays29dusays29@dusays.com暂无30dusays30dusays30@dusays.com暂无31dusays31dusays31@dusays.com暂无32dusays32dusays32@dusays.com暂无33dusays33dusays33@dusays.com暂无34dusays34dusays34@dusays.com暂无35dusays35dusays35@dusays.com暂无36dusays36dusays36@dusays.com暂无37dusays37dusays37@dusays.com暂无38dusays38dusays38@dusays.com暂无39dusays39dusays39@dusays.com暂无40dusays40dusays40@dusays.com暂无41dusays41dusays41@dusays.com暂无42dusays42dusays42@dusays.com暂无43dusays43dusays43@dusays.com暂无44dusays44dusays44@dusays.com暂无45dusays45dusays45@dusays.com暂无46dusays46dusays46@dusays.com暂无47dusays47dusays47@dusays.com暂无48dusays48dusays48@dusays.com暂无49dusays49dusays49@dusays.com暂无50dusays50dusays50@dusays.com暂无51dusays51dusays51@dusays.com暂无52dusays52dusays52@dusays.com暂无53dusays53dusays53@dusays.com暂无54dusays54dusays54@dusays.com暂无55dusays55dusays55@dusays.com暂无56dusays56dusays56@dusays.com暂无57dusays57dusays57@dusays.com暂无58dusays58dusays58@dusays.com暂无59dusays59dusays59@dusays.com暂无60dusays60dusays60@dusays.com暂无61dusays61dusays61@dusays.com暂无62dusays62dusays62@dusays.com暂无63dusays63dusays63@dusays.com暂无64dusays64dusays64@dusays.com暂无65dusays65dusays65@dusays.com暂无66dusays66dusays66@dusays.com已用67dusays67dusays67@dusays.com暂无68dusays68dusays68@dusays.com暂无69dusays69dusays69@dusays.com暂无70dusays70dusays70@dusays.com暂无71dusays71dusays71@dusays.com暂无72dusays72dusays72@dusays.com暂无73dusays73dusays73@dusays.com暂无74dusays74dusays74@dusays.com暂无75dusays75dusays75@dusays.com暂无76dusays76dusays76@dusays.com暂无77dusays77dusays77@dusays.com暂无78dusays78dusays78@dusays.com暂无79dusays79dusays79@dusays.com暂无80dusays80dusays80@dusays.com暂无81dusays81dusays81@dusays.com暂无82dusays82dusays82@dusays.com暂无83dusays83dusays83@dusays.com暂无84dusays84dusays84@dusays.com暂无85dusays85dusays85@dusays.com暂无86dusays86dusays86@dusays.com暂无87dusays87dusays87@dusays.com暂无88dusays88dusays88@dusays.com已用89dusays89dusays89@dusays.com暂无90dusays90dusays90@dusays.com暂无91dusays91dusays91@dusays.com暂无92dusays92dusays92@dusays.com暂无93dusays93dusays93@dusays.com暂无94dusays94dusays94@dusays.com暂无95dusays95dusays95@dusays.com已用96dusays96dusays96@dusays.com已用97dusays97dusays97@dusays.com暂无98dusays98dusays98@dusays.com暂无99dusays99dusays99@dusays.com已用100dusays100dusays100@dusays.com已用站点地址公测站点地址如下，点击访问即可。因为公测站点是单线路，与图片外链同线路，所以访问速度较慢，请访问慢的小伙伴耐心等待页面加载：https://test.7bu.top/https://test.7bu.top/公测规则本站仅供测试使用，请勿用于非法用途；原去不图床的账号无法在测试平台中使用，请使用提供的体验账号；如选择好体验账号，请将编号留言至评论区，杜老师会备注信息，方便其它的小伙伴选择；公测平台预计运营至三月底，届时所有数据将被释放，请勿保存重要数据；在使用的过程中如发现有任何 bug，欢迎在评论区留言，杜老师会第一时间提交给程序开发者，尽量完善新版图床程序；最终解释权归杜老师说所有。"
  },
  {
    "title": "Certimate--自动化申请并部署证书到所有平台",
    "author": "LiuShen's Blog",
    "date": "2025-03-07T07:45:00.000Z",
    "link": "https://blog.liushen.fun/posts/3a813929/",
    "content": "自从众多免费证书有效期减少到了三个月，换证书就成为了一件麻烦的事情。近期，Certimate工具更新了3.0版本，这个版本非常的强大，不仅可以部署常规的CDN，还可以部署雷池，宝塔等平台，满足了我的所有需求，所以推荐给没有使用过的朋友试试！"
  },
  {
    "title": "静态网站优化方案",
    "author": "LiuShen's Blog",
    "date": "2025-02-27T02:11:00.000Z",
    "link": "https://blog.liushen.fun/posts/260f4f9a/",
    "content": "最近加了不少好友的友链，认识了许多网站上的朋友。由于众所周知的原因，有些国外服务在国内访问较慢，部分朋友的站点因此影响了国内用户的访问体验。为了帮助大家提高访问速度，我写了这篇文章，简单介绍了一些我所了解的网站加速方案，希望能够帮助更多朋友改善速度问题。"
  },
  {
    "title": "从Memos转移到Moments",
    "author": "LiuShen's Blog",
    "date": "2025-02-18T13:14:00.000Z",
    "link": "https://blog.liushen.fun/posts/8338183a/",
    "content": "由于Memos作者频繁的更新API，一直想替换掉它，最终找到了替代程序Moments。虽然功能不如Memos丰富，但对于我这种把Memos当做说说使用的用户，Moments的功能更加实用。更重要的是，它的API简单易懂，数据更为实用，作者也非常听取用户反馈，积极改善产品。"
  },
  {
    "title": "windows本地部署DeepSeek-R1模型",
    "author": "LiuShen's Blog",
    "date": "2025-02-08T16:01:00.000Z",
    "link": "https://blog.liushen.fun/posts/f9a31276/",
    "content": "最近，DeepSeek因为遭受攻击事件登上热搜，作为一个计算机爱好者，我也非常感兴趣，于是研究了一下如何在本地部署模型，希望通过这篇文章与大家探讨并学习这一过程中的小技巧和感想。"
  },
  {
    "title": "2024再见，2025你好！",
    "author": "LiuShen's Blog",
    "date": "2025-02-01T16:31:00.000Z",
    "link": "https://blog.liushen.fun/posts/a0ab9e68/",
    "content": "回家啦回家啦！01月22号早上起床突然看到了一堆的未接电话，父母突然打过来说爷爷身体抱恙，让我提前回去帮忙，于是我连忙收拾东西洗澡洗脸刷牙，十二点，踏上了回老家的旅程。"
  },
  {
    "title": "Cloudflare/Vercel项目推荐(3)",
    "author": "LiuShen's Blog",
    "date": "2025-01-13T16:31:00.000Z",
    "link": "https://blog.liushen.fun/posts/cb179d4/",
    "content": "前面发布了关于 Cloudflare 和 Vercel 项目推荐的文章，收到了不少好评，许多小伙伴因此找到了实用的工具。因此，我决定将这一系列内容长期更新。考虑到 Cloudflare 和 Vercel 等 Serverless 平台有许多通用之处，这次将二者的推荐内容合并在一起，希望对大家有所帮助！"
  },
  {
    "title": "2024，清风入梦，扬帆待明年",
    "author": "LiuShen's Blog",
    "date": "2024-12-31T08:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/c7e32459/",
    "content": "2024年悄然而过，这一年充满挑战与收获。从考研备战到学业突破，从志愿服务的温暖瞬间到技术开发的点滴进步，每一步都写满努力与成长。回望这一年，忙碌而充实，期待在新的一年继续扬帆前行。"
  },
  {
    "title": "华为通用软件开发工程师面经",
    "author": "LiuShen's Blog",
    "date": "2024-12-25T08:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/24538266/",
    "content": "十二月初，有幸和华为签了约，然而当时一直在备战考研，无论去不去，我也走了这么远，就此放弃甚是不甘，于是我打算登到山顶，看看那边更高的山。"
  },
  {
    "title": "智云加速--JSDelivr国内公益加速镜像",
    "author": "LiuShen's Blog",
    "date": "2024-10-27T16:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/cd89007e/",
    "content": "最近初七云的合作者，也是朋友Jason，组建了一个Jsdelivr镜像站，经过测试，国内速度非常不错，并且也没有什么非常大的限制，带宽也比较充足，于是在这里推荐给大家，希望可以帮助大家提升网站速度！"
  },
  {
    "title": "Chsrc--全功能一键换源工具",
    "author": "LiuShen's Blog",
    "date": "2024-09-30T16:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/b330686/",
    "content": "详细介绍了chsrc工具的安装和使用，提供了简单的命令帮助开发者快速切换不同语言的源，提升开发效率。无论是熟练用户还是新手，chsrc都能让换源变得简单高效，解决了换源过程中的一些困扰。"
  },
  {
    "title": "迄今所有人生都大写着失败，但不妨碍我继续向前",
    "author": "LiuShen's Blog",
    "date": "2024-09-18T00:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/95c77d9e/",
    "content": "中秋夜，失败再次降临，心情如月光般冷清。回望过去，我总与成功擦肩，内心充满不甘与恐惧。尽管如此，我不会停下，唯有继续前行，才能找到属于自己的那一束光。"
  },
  {
    "title": "OpenGist--自部署代码片段保存项目",
    "author": "LiuShen's Blog",
    "date": "2024-09-04T16:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/1ab3d6a1/",
    "content": "最近一直在找一个快捷分享文本片段并保存的项目，曾使用cf worker搭建了pastbin，使用vercel搭建了轻笑的文本粘贴分享项目，为了速度，我又自行搭建了FileCodeBox项目，但由于各种原因，我都不是很满意，于是继续寻找，最终找到了opengist，基本满足了我的要求。"
  },
  {
    "title": "太白山&法门寺三日游游记",
    "author": "LiuShen's Blog",
    "date": "2024-08-26T16:06:00.000Z",
    "link": "https://blog.liushen.fun/posts/62e27d26/",
    "content": "转瞬之间，暑假即将过去，我父母决定带我出去玩，经过一番选择，我们选择了太白山国家森林公园，以及其周围的法门寺，经过三天的游玩，我们了解到了很多新知识，也锻炼了身体，放松了身心。"
  }
]